/*
 * --------------------------------------------------------------------------------
 * <copyright company="Aspose" file="WordsApi.java">
 *   Copyright (c) 2021 Aspose.Words for Cloud
 * </copyright>
 * <summary>
 *   Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 * 
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 * 
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 * </summary>
 * --------------------------------------------------------------------------------
 */

package com.aspose.words.cloud.api;

import com.aspose.words.cloud.*;
import com.aspose.words.cloud.model.*;
import com.aspose.words.cloud.model.requests.*;
import com.aspose.words.cloud.model.responses.*;
import com.google.gson.reflect.TypeToken;
import com.squareup.okhttp.Response;
import java.io.IOException;
import javax.mail.MessagingException;
import java.io.File;
import java.lang.reflect.Type;
import java.util.*;

public class WordsApi {
    private ApiClient apiClient;

    public WordsApi(String clientId, String clientSecret, String baseUrl) {
        this(new ApiClient(clientId, clientSecret, baseUrl));
    }

    public WordsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public WordsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call acceptAllRevisionsValidateBeforeCall(AcceptAllRevisionsRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Accepts all revisions in the document.
     * @param request Request object
     * @return RevisionsModificationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public RevisionsModificationResponse acceptAllRevisions(AcceptAllRevisionsRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< RevisionsModificationResponse > resp = acceptAllRevisionsWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< RevisionsModificationResponse > resp = acceptAllRevisionsWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Accepts all revisions in the document.
     * @param request Request object
     * @return ApiResponse< RevisionsModificationResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< RevisionsModificationResponse > acceptAllRevisionsWithHttpInfo(AcceptAllRevisionsRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = acceptAllRevisionsValidateBeforeCall(request, null, null);
        Response response = call.execute();
        RevisionsModificationResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< RevisionsModificationResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Accepts all revisions in the document. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call acceptAllRevisionsAsync(AcceptAllRevisionsRequest request, final ApiCallback< RevisionsModificationResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = acceptAllRevisionsValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call acceptAllRevisionsOnlineValidateBeforeCall(AcceptAllRevisionsOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Accepts all revisions in the document.
     * @param request Request object
     * @return AcceptAllRevisionsOnlineResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public AcceptAllRevisionsOnlineResponse acceptAllRevisionsOnline(AcceptAllRevisionsOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< AcceptAllRevisionsOnlineResponse > resp = acceptAllRevisionsOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< AcceptAllRevisionsOnlineResponse > resp = acceptAllRevisionsOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Accepts all revisions in the document.
     * @param request Request object
     * @return ApiResponse< AcceptAllRevisionsOnlineResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< AcceptAllRevisionsOnlineResponse > acceptAllRevisionsOnlineWithHttpInfo(AcceptAllRevisionsOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = acceptAllRevisionsOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        AcceptAllRevisionsOnlineResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< AcceptAllRevisionsOnlineResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Accepts all revisions in the document. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call acceptAllRevisionsOnlineAsync(AcceptAllRevisionsOnlineRequest request, final ApiCallback< AcceptAllRevisionsOnlineResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = acceptAllRevisionsOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call appendDocumentValidateBeforeCall(AppendDocumentRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Appends documents to the original document.
     * @param request Request object
     * @return DocumentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public DocumentResponse appendDocument(AppendDocumentRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< DocumentResponse > resp = appendDocumentWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< DocumentResponse > resp = appendDocumentWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Appends documents to the original document.
     * @param request Request object
     * @return ApiResponse< DocumentResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< DocumentResponse > appendDocumentWithHttpInfo(AppendDocumentRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = appendDocumentValidateBeforeCall(request, null, null);
        Response response = call.execute();
        DocumentResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< DocumentResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Appends documents to the original document. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call appendDocumentAsync(AppendDocumentRequest request, final ApiCallback< DocumentResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = appendDocumentValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call appendDocumentOnlineValidateBeforeCall(AppendDocumentOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Appends documents to the original document.
     * @param request Request object
     * @return AppendDocumentOnlineResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public AppendDocumentOnlineResponse appendDocumentOnline(AppendDocumentOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< AppendDocumentOnlineResponse > resp = appendDocumentOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< AppendDocumentOnlineResponse > resp = appendDocumentOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Appends documents to the original document.
     * @param request Request object
     * @return ApiResponse< AppendDocumentOnlineResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< AppendDocumentOnlineResponse > appendDocumentOnlineWithHttpInfo(AppendDocumentOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = appendDocumentOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        AppendDocumentOnlineResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< AppendDocumentOnlineResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Appends documents to the original document. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call appendDocumentOnlineAsync(AppendDocumentOnlineRequest request, final ApiCallback< AppendDocumentOnlineResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = appendDocumentOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call applyStyleToDocumentElementValidateBeforeCall(ApplyStyleToDocumentElementRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Applies a style to the document node.
     * @param request Request object
     * @return WordsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public WordsResponse applyStyleToDocumentElement(ApplyStyleToDocumentElementRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< WordsResponse > resp = applyStyleToDocumentElementWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< WordsResponse > resp = applyStyleToDocumentElementWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Applies a style to the document node.
     * @param request Request object
     * @return ApiResponse< WordsResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< WordsResponse > applyStyleToDocumentElementWithHttpInfo(ApplyStyleToDocumentElementRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = applyStyleToDocumentElementValidateBeforeCall(request, null, null);
        Response response = call.execute();
        WordsResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< WordsResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Applies a style to the document node. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call applyStyleToDocumentElementAsync(ApplyStyleToDocumentElementRequest request, final ApiCallback< WordsResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = applyStyleToDocumentElementValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call applyStyleToDocumentElementOnlineValidateBeforeCall(ApplyStyleToDocumentElementOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Applies a style to the document node.
     * @param request Request object
     * @return ApplyStyleToDocumentElementOnlineResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public ApplyStyleToDocumentElementOnlineResponse applyStyleToDocumentElementOnline(ApplyStyleToDocumentElementOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< ApplyStyleToDocumentElementOnlineResponse > resp = applyStyleToDocumentElementOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< ApplyStyleToDocumentElementOnlineResponse > resp = applyStyleToDocumentElementOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Applies a style to the document node.
     * @param request Request object
     * @return ApiResponse< ApplyStyleToDocumentElementOnlineResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< ApplyStyleToDocumentElementOnlineResponse > applyStyleToDocumentElementOnlineWithHttpInfo(ApplyStyleToDocumentElementOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = applyStyleToDocumentElementOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        ApplyStyleToDocumentElementOnlineResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< ApplyStyleToDocumentElementOnlineResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Applies a style to the document node. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call applyStyleToDocumentElementOnlineAsync(ApplyStyleToDocumentElementOnlineRequest request, final ApiCallback< ApplyStyleToDocumentElementOnlineResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = applyStyleToDocumentElementOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call buildReportValidateBeforeCall(BuildReportRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Executes the report generation process using the specified document template and the external data source in XML, JSON or CSV format.
     * @param request Request object
     * @return DocumentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public DocumentResponse buildReport(BuildReportRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< DocumentResponse > resp = buildReportWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< DocumentResponse > resp = buildReportWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Executes the report generation process using the specified document template and the external data source in XML, JSON or CSV format.
     * @param request Request object
     * @return ApiResponse< DocumentResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< DocumentResponse > buildReportWithHttpInfo(BuildReportRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = buildReportValidateBeforeCall(request, null, null);
        Response response = call.execute();
        DocumentResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< DocumentResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Executes the report generation process using the specified document template and the external data source in XML, JSON or CSV format. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call buildReportAsync(BuildReportRequest request, final ApiCallback< DocumentResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = buildReportValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call buildReportOnlineValidateBeforeCall(BuildReportOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Executes the report generation process online using the specified document template and the external data source in XML, JSON or CSV format.
     * @param request Request object
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public File buildReportOnline(BuildReportOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< File > resp = buildReportOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< File > resp = buildReportOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Executes the report generation process online using the specified document template and the external data source in XML, JSON or CSV format.
     * @param request Request object
     * @return ApiResponse< File >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< File > buildReportOnlineWithHttpInfo(BuildReportOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = buildReportOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        File data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< File >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Executes the report generation process online using the specified document template and the external data source in XML, JSON or CSV format. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call buildReportOnlineAsync(BuildReportOnlineRequest request, final ApiCallback< File > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = buildReportOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call classifyValidateBeforeCall(ClassifyRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Runs a multi-class text classification for the specified raw text.
     * @param request Request object
     * @return ClassificationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public ClassificationResponse classify(ClassifyRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< ClassificationResponse > resp = classifyWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< ClassificationResponse > resp = classifyWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Runs a multi-class text classification for the specified raw text.
     * @param request Request object
     * @return ApiResponse< ClassificationResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< ClassificationResponse > classifyWithHttpInfo(ClassifyRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = classifyValidateBeforeCall(request, null, null);
        Response response = call.execute();
        ClassificationResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< ClassificationResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Runs a multi-class text classification for the specified raw text. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call classifyAsync(ClassifyRequest request, final ApiCallback< ClassificationResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = classifyValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call classifyDocumentValidateBeforeCall(ClassifyDocumentRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Runs a multi-class text classification for the document.
     * @param request Request object
     * @return ClassificationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public ClassificationResponse classifyDocument(ClassifyDocumentRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< ClassificationResponse > resp = classifyDocumentWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< ClassificationResponse > resp = classifyDocumentWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Runs a multi-class text classification for the document.
     * @param request Request object
     * @return ApiResponse< ClassificationResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< ClassificationResponse > classifyDocumentWithHttpInfo(ClassifyDocumentRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = classifyDocumentValidateBeforeCall(request, null, null);
        Response response = call.execute();
        ClassificationResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< ClassificationResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Runs a multi-class text classification for the document. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call classifyDocumentAsync(ClassifyDocumentRequest request, final ApiCallback< ClassificationResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = classifyDocumentValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call classifyDocumentOnlineValidateBeforeCall(ClassifyDocumentOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Runs a multi-class text classification for the document.
     * @param request Request object
     * @return ClassificationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public ClassificationResponse classifyDocumentOnline(ClassifyDocumentOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< ClassificationResponse > resp = classifyDocumentOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< ClassificationResponse > resp = classifyDocumentOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Runs a multi-class text classification for the document.
     * @param request Request object
     * @return ApiResponse< ClassificationResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< ClassificationResponse > classifyDocumentOnlineWithHttpInfo(ClassifyDocumentOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = classifyDocumentOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        ClassificationResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< ClassificationResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Runs a multi-class text classification for the document. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call classifyDocumentOnlineAsync(ClassifyDocumentOnlineRequest request, final ApiCallback< ClassificationResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = classifyDocumentOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call compareDocumentValidateBeforeCall(CompareDocumentRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Compares two documents.
     * @param request Request object
     * @return DocumentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public DocumentResponse compareDocument(CompareDocumentRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< DocumentResponse > resp = compareDocumentWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< DocumentResponse > resp = compareDocumentWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Compares two documents.
     * @param request Request object
     * @return ApiResponse< DocumentResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< DocumentResponse > compareDocumentWithHttpInfo(CompareDocumentRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = compareDocumentValidateBeforeCall(request, null, null);
        Response response = call.execute();
        DocumentResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< DocumentResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Compares two documents. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call compareDocumentAsync(CompareDocumentRequest request, final ApiCallback< DocumentResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = compareDocumentValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call compareDocumentOnlineValidateBeforeCall(CompareDocumentOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Compares two documents.
     * @param request Request object
     * @return CompareDocumentOnlineResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public CompareDocumentOnlineResponse compareDocumentOnline(CompareDocumentOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< CompareDocumentOnlineResponse > resp = compareDocumentOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< CompareDocumentOnlineResponse > resp = compareDocumentOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Compares two documents.
     * @param request Request object
     * @return ApiResponse< CompareDocumentOnlineResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< CompareDocumentOnlineResponse > compareDocumentOnlineWithHttpInfo(CompareDocumentOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = compareDocumentOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        CompareDocumentOnlineResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< CompareDocumentOnlineResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Compares two documents. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call compareDocumentOnlineAsync(CompareDocumentOnlineRequest request, final ApiCallback< CompareDocumentOnlineResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = compareDocumentOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call convertDocumentValidateBeforeCall(ConvertDocumentRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Converts a document on a local drive to the specified format.
     * @param request Request object
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public File convertDocument(ConvertDocumentRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< File > resp = convertDocumentWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< File > resp = convertDocumentWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Converts a document on a local drive to the specified format.
     * @param request Request object
     * @return ApiResponse< File >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< File > convertDocumentWithHttpInfo(ConvertDocumentRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = convertDocumentValidateBeforeCall(request, null, null);
        Response response = call.execute();
        File data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< File >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Converts a document on a local drive to the specified format. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call convertDocumentAsync(ConvertDocumentRequest request, final ApiCallback< File > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = convertDocumentValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call copyFileValidateBeforeCall(CopyFileRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Copy file.
     * @param request Request object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public void copyFile(CopyFileRequest request) throws ApiException, MessagingException, IOException {
        try {
    copyFileWithHttpInfo(request);
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
    copyFileWithHttpInfo(request);
            }
            throw ex;
        }
    }

    /**
     * Copy file.
     * @param request Request object
     * @return ApiResponse< void >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< Void > copyFileWithHttpInfo(CopyFileRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = copyFileValidateBeforeCall(request, null, null);
        return apiClient.execute(call);
    }

    /**
     * Copy file. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call copyFileAsync(CopyFileRequest request, final ApiCallback< Void > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = copyFileValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call copyFolderValidateBeforeCall(CopyFolderRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Copy folder.
     * @param request Request object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public void copyFolder(CopyFolderRequest request) throws ApiException, MessagingException, IOException {
        try {
    copyFolderWithHttpInfo(request);
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
    copyFolderWithHttpInfo(request);
            }
            throw ex;
        }
    }

    /**
     * Copy folder.
     * @param request Request object
     * @return ApiResponse< void >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< Void > copyFolderWithHttpInfo(CopyFolderRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = copyFolderValidateBeforeCall(request, null, null);
        return apiClient.execute(call);
    }

    /**
     * Copy folder. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call copyFolderAsync(CopyFolderRequest request, final ApiCallback< Void > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = copyFolderValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call copyStyleValidateBeforeCall(CopyStyleRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Makes a copy of the style in the document.
     * @param request Request object
     * @return StyleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public StyleResponse copyStyle(CopyStyleRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< StyleResponse > resp = copyStyleWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< StyleResponse > resp = copyStyleWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Makes a copy of the style in the document.
     * @param request Request object
     * @return ApiResponse< StyleResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< StyleResponse > copyStyleWithHttpInfo(CopyStyleRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = copyStyleValidateBeforeCall(request, null, null);
        Response response = call.execute();
        StyleResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< StyleResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Makes a copy of the style in the document. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call copyStyleAsync(CopyStyleRequest request, final ApiCallback< StyleResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = copyStyleValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call copyStyleOnlineValidateBeforeCall(CopyStyleOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Makes a copy of the style in the document.
     * @param request Request object
     * @return CopyStyleOnlineResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public CopyStyleOnlineResponse copyStyleOnline(CopyStyleOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< CopyStyleOnlineResponse > resp = copyStyleOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< CopyStyleOnlineResponse > resp = copyStyleOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Makes a copy of the style in the document.
     * @param request Request object
     * @return ApiResponse< CopyStyleOnlineResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< CopyStyleOnlineResponse > copyStyleOnlineWithHttpInfo(CopyStyleOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = copyStyleOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        CopyStyleOnlineResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< CopyStyleOnlineResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Makes a copy of the style in the document. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call copyStyleOnlineAsync(CopyStyleOnlineRequest request, final ApiCallback< CopyStyleOnlineResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = copyStyleOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createDocumentValidateBeforeCall(CreateDocumentRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Supported extensions: ".doc", ".docx", ".docm", ".dot", ".dotm", ".dotx", ".flatopc", ".fopc", ".flatopc_macro", ".fopc_macro", ".flatopc_template", ".fopc_template", ".flatopc_template_macro", ".fopc_template_macro", ".wordml", ".wml", ".rtf".
     * @param request Request object
     * @return DocumentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public DocumentResponse createDocument(CreateDocumentRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< DocumentResponse > resp = createDocumentWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< DocumentResponse > resp = createDocumentWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Supported extensions: ".doc", ".docx", ".docm", ".dot", ".dotm", ".dotx", ".flatopc", ".fopc", ".flatopc_macro", ".fopc_macro", ".flatopc_template", ".fopc_template", ".flatopc_template_macro", ".fopc_template_macro", ".wordml", ".wml", ".rtf".
     * @param request Request object
     * @return ApiResponse< DocumentResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< DocumentResponse > createDocumentWithHttpInfo(CreateDocumentRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = createDocumentValidateBeforeCall(request, null, null);
        Response response = call.execute();
        DocumentResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< DocumentResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Supported extensions: ".doc", ".docx", ".docm", ".dot", ".dotm", ".dotx", ".flatopc", ".fopc", ".flatopc_macro", ".fopc_macro", ".flatopc_template", ".fopc_template", ".flatopc_template_macro", ".fopc_template_macro", ".wordml", ".wml", ".rtf". (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createDocumentAsync(CreateDocumentRequest request, final ApiCallback< DocumentResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createDocumentValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createFolderValidateBeforeCall(CreateFolderRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Create the folder.
     * @param request Request object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public void createFolder(CreateFolderRequest request) throws ApiException, MessagingException, IOException {
        try {
    createFolderWithHttpInfo(request);
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
    createFolderWithHttpInfo(request);
            }
            throw ex;
        }
    }

    /**
     * Create the folder.
     * @param request Request object
     * @return ApiResponse< void >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< Void > createFolderWithHttpInfo(CreateFolderRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = createFolderValidateBeforeCall(request, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create the folder. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createFolderAsync(CreateFolderRequest request, final ApiCallback< Void > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createFolderValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createOrUpdateDocumentPropertyValidateBeforeCall(CreateOrUpdateDocumentPropertyRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Adds a new or updates an existing document property.
     * @param request Request object
     * @return DocumentPropertyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public DocumentPropertyResponse createOrUpdateDocumentProperty(CreateOrUpdateDocumentPropertyRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< DocumentPropertyResponse > resp = createOrUpdateDocumentPropertyWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< DocumentPropertyResponse > resp = createOrUpdateDocumentPropertyWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Adds a new or updates an existing document property.
     * @param request Request object
     * @return ApiResponse< DocumentPropertyResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< DocumentPropertyResponse > createOrUpdateDocumentPropertyWithHttpInfo(CreateOrUpdateDocumentPropertyRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = createOrUpdateDocumentPropertyValidateBeforeCall(request, null, null);
        Response response = call.execute();
        DocumentPropertyResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< DocumentPropertyResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Adds a new or updates an existing document property. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createOrUpdateDocumentPropertyAsync(CreateOrUpdateDocumentPropertyRequest request, final ApiCallback< DocumentPropertyResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createOrUpdateDocumentPropertyValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createOrUpdateDocumentPropertyOnlineValidateBeforeCall(CreateOrUpdateDocumentPropertyOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Adds a new or updates an existing document property.
     * @param request Request object
     * @return CreateOrUpdateDocumentPropertyOnlineResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public CreateOrUpdateDocumentPropertyOnlineResponse createOrUpdateDocumentPropertyOnline(CreateOrUpdateDocumentPropertyOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< CreateOrUpdateDocumentPropertyOnlineResponse > resp = createOrUpdateDocumentPropertyOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< CreateOrUpdateDocumentPropertyOnlineResponse > resp = createOrUpdateDocumentPropertyOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Adds a new or updates an existing document property.
     * @param request Request object
     * @return ApiResponse< CreateOrUpdateDocumentPropertyOnlineResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< CreateOrUpdateDocumentPropertyOnlineResponse > createOrUpdateDocumentPropertyOnlineWithHttpInfo(CreateOrUpdateDocumentPropertyOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = createOrUpdateDocumentPropertyOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        CreateOrUpdateDocumentPropertyOnlineResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< CreateOrUpdateDocumentPropertyOnlineResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Adds a new or updates an existing document property. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createOrUpdateDocumentPropertyOnlineAsync(CreateOrUpdateDocumentPropertyOnlineRequest request, final ApiCallback< CreateOrUpdateDocumentPropertyOnlineResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createOrUpdateDocumentPropertyOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteAllParagraphTabStopsValidateBeforeCall(DeleteAllParagraphTabStopsRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Removes paragraph tab stops from the document node.
     * @param request Request object
     * @return TabStopsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public TabStopsResponse deleteAllParagraphTabStops(DeleteAllParagraphTabStopsRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< TabStopsResponse > resp = deleteAllParagraphTabStopsWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< TabStopsResponse > resp = deleteAllParagraphTabStopsWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Removes paragraph tab stops from the document node.
     * @param request Request object
     * @return ApiResponse< TabStopsResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< TabStopsResponse > deleteAllParagraphTabStopsWithHttpInfo(DeleteAllParagraphTabStopsRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = deleteAllParagraphTabStopsValidateBeforeCall(request, null, null);
        Response response = call.execute();
        TabStopsResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< TabStopsResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Removes paragraph tab stops from the document node. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteAllParagraphTabStopsAsync(DeleteAllParagraphTabStopsRequest request, final ApiCallback< TabStopsResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteAllParagraphTabStopsValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteAllParagraphTabStopsOnlineValidateBeforeCall(DeleteAllParagraphTabStopsOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Removes paragraph tab stops from the document node.
     * @param request Request object
     * @return DeleteAllParagraphTabStopsOnlineResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public DeleteAllParagraphTabStopsOnlineResponse deleteAllParagraphTabStopsOnline(DeleteAllParagraphTabStopsOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< DeleteAllParagraphTabStopsOnlineResponse > resp = deleteAllParagraphTabStopsOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< DeleteAllParagraphTabStopsOnlineResponse > resp = deleteAllParagraphTabStopsOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Removes paragraph tab stops from the document node.
     * @param request Request object
     * @return ApiResponse< DeleteAllParagraphTabStopsOnlineResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< DeleteAllParagraphTabStopsOnlineResponse > deleteAllParagraphTabStopsOnlineWithHttpInfo(DeleteAllParagraphTabStopsOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = deleteAllParagraphTabStopsOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        DeleteAllParagraphTabStopsOnlineResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< DeleteAllParagraphTabStopsOnlineResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Removes paragraph tab stops from the document node. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteAllParagraphTabStopsOnlineAsync(DeleteAllParagraphTabStopsOnlineRequest request, final ApiCallback< DeleteAllParagraphTabStopsOnlineResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteAllParagraphTabStopsOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteBorderValidateBeforeCall(DeleteBorderRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * The 'nodePath' parameter should refer to a paragraph, a cell or a row.
     * @param request Request object
     * @return BorderResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public BorderResponse deleteBorder(DeleteBorderRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< BorderResponse > resp = deleteBorderWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< BorderResponse > resp = deleteBorderWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * The 'nodePath' parameter should refer to a paragraph, a cell or a row.
     * @param request Request object
     * @return ApiResponse< BorderResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< BorderResponse > deleteBorderWithHttpInfo(DeleteBorderRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = deleteBorderValidateBeforeCall(request, null, null);
        Response response = call.execute();
        BorderResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< BorderResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * The 'nodePath' parameter should refer to a paragraph, a cell or a row. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteBorderAsync(DeleteBorderRequest request, final ApiCallback< BorderResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteBorderValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteBorderOnlineValidateBeforeCall(DeleteBorderOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Removes a border from the document node.
     * @param request Request object
     * @return DeleteBorderOnlineResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public DeleteBorderOnlineResponse deleteBorderOnline(DeleteBorderOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< DeleteBorderOnlineResponse > resp = deleteBorderOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< DeleteBorderOnlineResponse > resp = deleteBorderOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Removes a border from the document node.
     * @param request Request object
     * @return ApiResponse< DeleteBorderOnlineResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< DeleteBorderOnlineResponse > deleteBorderOnlineWithHttpInfo(DeleteBorderOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = deleteBorderOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        DeleteBorderOnlineResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< DeleteBorderOnlineResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Removes a border from the document node. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteBorderOnlineAsync(DeleteBorderOnlineRequest request, final ApiCallback< DeleteBorderOnlineResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteBorderOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteBordersValidateBeforeCall(DeleteBordersRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * The 'nodePath' parameter should refer to a paragraph, a cell or a row.
     * @param request Request object
     * @return BordersResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public BordersResponse deleteBorders(DeleteBordersRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< BordersResponse > resp = deleteBordersWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< BordersResponse > resp = deleteBordersWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * The 'nodePath' parameter should refer to a paragraph, a cell or a row.
     * @param request Request object
     * @return ApiResponse< BordersResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< BordersResponse > deleteBordersWithHttpInfo(DeleteBordersRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = deleteBordersValidateBeforeCall(request, null, null);
        Response response = call.execute();
        BordersResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< BordersResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * The 'nodePath' parameter should refer to a paragraph, a cell or a row. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteBordersAsync(DeleteBordersRequest request, final ApiCallback< BordersResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteBordersValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteBordersOnlineValidateBeforeCall(DeleteBordersOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Removes borders from the document node.
     * @param request Request object
     * @return DeleteBordersOnlineResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public DeleteBordersOnlineResponse deleteBordersOnline(DeleteBordersOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< DeleteBordersOnlineResponse > resp = deleteBordersOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< DeleteBordersOnlineResponse > resp = deleteBordersOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Removes borders from the document node.
     * @param request Request object
     * @return ApiResponse< DeleteBordersOnlineResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< DeleteBordersOnlineResponse > deleteBordersOnlineWithHttpInfo(DeleteBordersOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = deleteBordersOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        DeleteBordersOnlineResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< DeleteBordersOnlineResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Removes borders from the document node. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteBordersOnlineAsync(DeleteBordersOnlineRequest request, final ApiCallback< DeleteBordersOnlineResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteBordersOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteCommentValidateBeforeCall(DeleteCommentRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Removes a comment from the document.
     * @param request Request object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public void deleteComment(DeleteCommentRequest request) throws ApiException, MessagingException, IOException {
        try {
    deleteCommentWithHttpInfo(request);
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
    deleteCommentWithHttpInfo(request);
            }
            throw ex;
        }
    }

    /**
     * Removes a comment from the document.
     * @param request Request object
     * @return ApiResponse< void >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< Void > deleteCommentWithHttpInfo(DeleteCommentRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = deleteCommentValidateBeforeCall(request, null, null);
        return apiClient.execute(call);
    }

    /**
     * Removes a comment from the document. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteCommentAsync(DeleteCommentRequest request, final ApiCallback< Void > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteCommentValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteCommentOnlineValidateBeforeCall(DeleteCommentOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Removes a comment from the document.
     * @param request Request object
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public File deleteCommentOnline(DeleteCommentOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< File > resp = deleteCommentOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< File > resp = deleteCommentOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Removes a comment from the document.
     * @param request Request object
     * @return ApiResponse< File >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< File > deleteCommentOnlineWithHttpInfo(DeleteCommentOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = deleteCommentOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        File data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< File >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Removes a comment from the document. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteCommentOnlineAsync(DeleteCommentOnlineRequest request, final ApiCallback< File > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteCommentOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteCommentsValidateBeforeCall(DeleteCommentsRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Removes all comments from the document.
     * @param request Request object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public void deleteComments(DeleteCommentsRequest request) throws ApiException, MessagingException, IOException {
        try {
    deleteCommentsWithHttpInfo(request);
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
    deleteCommentsWithHttpInfo(request);
            }
            throw ex;
        }
    }

    /**
     * Removes all comments from the document.
     * @param request Request object
     * @return ApiResponse< void >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< Void > deleteCommentsWithHttpInfo(DeleteCommentsRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = deleteCommentsValidateBeforeCall(request, null, null);
        return apiClient.execute(call);
    }

    /**
     * Removes all comments from the document. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteCommentsAsync(DeleteCommentsRequest request, final ApiCallback< Void > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteCommentsValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteCommentsOnlineValidateBeforeCall(DeleteCommentsOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Removes all comments from the document.
     * @param request Request object
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public File deleteCommentsOnline(DeleteCommentsOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< File > resp = deleteCommentsOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< File > resp = deleteCommentsOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Removes all comments from the document.
     * @param request Request object
     * @return ApiResponse< File >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< File > deleteCommentsOnlineWithHttpInfo(DeleteCommentsOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = deleteCommentsOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        File data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< File >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Removes all comments from the document. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteCommentsOnlineAsync(DeleteCommentsOnlineRequest request, final ApiCallback< File > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteCommentsOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteDocumentPropertyValidateBeforeCall(DeleteDocumentPropertyRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Removes a document property.
     * @param request Request object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public void deleteDocumentProperty(DeleteDocumentPropertyRequest request) throws ApiException, MessagingException, IOException {
        try {
    deleteDocumentPropertyWithHttpInfo(request);
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
    deleteDocumentPropertyWithHttpInfo(request);
            }
            throw ex;
        }
    }

    /**
     * Removes a document property.
     * @param request Request object
     * @return ApiResponse< void >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< Void > deleteDocumentPropertyWithHttpInfo(DeleteDocumentPropertyRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = deleteDocumentPropertyValidateBeforeCall(request, null, null);
        return apiClient.execute(call);
    }

    /**
     * Removes a document property. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteDocumentPropertyAsync(DeleteDocumentPropertyRequest request, final ApiCallback< Void > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteDocumentPropertyValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteDocumentPropertyOnlineValidateBeforeCall(DeleteDocumentPropertyOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Removes a document property.
     * @param request Request object
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public File deleteDocumentPropertyOnline(DeleteDocumentPropertyOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< File > resp = deleteDocumentPropertyOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< File > resp = deleteDocumentPropertyOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Removes a document property.
     * @param request Request object
     * @return ApiResponse< File >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< File > deleteDocumentPropertyOnlineWithHttpInfo(DeleteDocumentPropertyOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = deleteDocumentPropertyOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        File data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< File >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Removes a document property. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteDocumentPropertyOnlineAsync(DeleteDocumentPropertyOnlineRequest request, final ApiCallback< File > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteDocumentPropertyOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteDrawingObjectValidateBeforeCall(DeleteDrawingObjectRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Removes a DrawingObject from the document node.
     * @param request Request object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public void deleteDrawingObject(DeleteDrawingObjectRequest request) throws ApiException, MessagingException, IOException {
        try {
    deleteDrawingObjectWithHttpInfo(request);
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
    deleteDrawingObjectWithHttpInfo(request);
            }
            throw ex;
        }
    }

    /**
     * Removes a DrawingObject from the document node.
     * @param request Request object
     * @return ApiResponse< void >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< Void > deleteDrawingObjectWithHttpInfo(DeleteDrawingObjectRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = deleteDrawingObjectValidateBeforeCall(request, null, null);
        return apiClient.execute(call);
    }

    /**
     * Removes a DrawingObject from the document node. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteDrawingObjectAsync(DeleteDrawingObjectRequest request, final ApiCallback< Void > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteDrawingObjectValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteDrawingObjectOnlineValidateBeforeCall(DeleteDrawingObjectOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Removes a DrawingObject from the document node.
     * @param request Request object
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public File deleteDrawingObjectOnline(DeleteDrawingObjectOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< File > resp = deleteDrawingObjectOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< File > resp = deleteDrawingObjectOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Removes a DrawingObject from the document node.
     * @param request Request object
     * @return ApiResponse< File >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< File > deleteDrawingObjectOnlineWithHttpInfo(DeleteDrawingObjectOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = deleteDrawingObjectOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        File data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< File >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Removes a DrawingObject from the document node. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteDrawingObjectOnlineAsync(DeleteDrawingObjectOnlineRequest request, final ApiCallback< File > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteDrawingObjectOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteFieldValidateBeforeCall(DeleteFieldRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Removes a field from the document node.
     * @param request Request object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public void deleteField(DeleteFieldRequest request) throws ApiException, MessagingException, IOException {
        try {
    deleteFieldWithHttpInfo(request);
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
    deleteFieldWithHttpInfo(request);
            }
            throw ex;
        }
    }

    /**
     * Removes a field from the document node.
     * @param request Request object
     * @return ApiResponse< void >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< Void > deleteFieldWithHttpInfo(DeleteFieldRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = deleteFieldValidateBeforeCall(request, null, null);
        return apiClient.execute(call);
    }

    /**
     * Removes a field from the document node. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteFieldAsync(DeleteFieldRequest request, final ApiCallback< Void > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteFieldValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteFieldOnlineValidateBeforeCall(DeleteFieldOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Removes a field from the document node.
     * @param request Request object
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public File deleteFieldOnline(DeleteFieldOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< File > resp = deleteFieldOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< File > resp = deleteFieldOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Removes a field from the document node.
     * @param request Request object
     * @return ApiResponse< File >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< File > deleteFieldOnlineWithHttpInfo(DeleteFieldOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = deleteFieldOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        File data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< File >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Removes a field from the document node. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteFieldOnlineAsync(DeleteFieldOnlineRequest request, final ApiCallback< File > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteFieldOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteFieldsValidateBeforeCall(DeleteFieldsRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Removes fields from the document node.
     * @param request Request object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public void deleteFields(DeleteFieldsRequest request) throws ApiException, MessagingException, IOException {
        try {
    deleteFieldsWithHttpInfo(request);
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
    deleteFieldsWithHttpInfo(request);
            }
            throw ex;
        }
    }

    /**
     * Removes fields from the document node.
     * @param request Request object
     * @return ApiResponse< void >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< Void > deleteFieldsWithHttpInfo(DeleteFieldsRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = deleteFieldsValidateBeforeCall(request, null, null);
        return apiClient.execute(call);
    }

    /**
     * Removes fields from the document node. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteFieldsAsync(DeleteFieldsRequest request, final ApiCallback< Void > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteFieldsValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteFieldsOnlineValidateBeforeCall(DeleteFieldsOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Removes fields from the document node.
     * @param request Request object
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public File deleteFieldsOnline(DeleteFieldsOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< File > resp = deleteFieldsOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< File > resp = deleteFieldsOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Removes fields from the document node.
     * @param request Request object
     * @return ApiResponse< File >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< File > deleteFieldsOnlineWithHttpInfo(DeleteFieldsOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = deleteFieldsOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        File data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< File >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Removes fields from the document node. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteFieldsOnlineAsync(DeleteFieldsOnlineRequest request, final ApiCallback< File > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteFieldsOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteFileValidateBeforeCall(DeleteFileRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Delete file.
     * @param request Request object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public void deleteFile(DeleteFileRequest request) throws ApiException, MessagingException, IOException {
        try {
    deleteFileWithHttpInfo(request);
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
    deleteFileWithHttpInfo(request);
            }
            throw ex;
        }
    }

    /**
     * Delete file.
     * @param request Request object
     * @return ApiResponse< void >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< Void > deleteFileWithHttpInfo(DeleteFileRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = deleteFileValidateBeforeCall(request, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete file. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteFileAsync(DeleteFileRequest request, final ApiCallback< Void > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteFileValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteFolderValidateBeforeCall(DeleteFolderRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Delete folder.
     * @param request Request object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public void deleteFolder(DeleteFolderRequest request) throws ApiException, MessagingException, IOException {
        try {
    deleteFolderWithHttpInfo(request);
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
    deleteFolderWithHttpInfo(request);
            }
            throw ex;
        }
    }

    /**
     * Delete folder.
     * @param request Request object
     * @return ApiResponse< void >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< Void > deleteFolderWithHttpInfo(DeleteFolderRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = deleteFolderValidateBeforeCall(request, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete folder. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteFolderAsync(DeleteFolderRequest request, final ApiCallback< Void > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteFolderValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteFootnoteValidateBeforeCall(DeleteFootnoteRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Removes a footnote from the document node.
     * @param request Request object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public void deleteFootnote(DeleteFootnoteRequest request) throws ApiException, MessagingException, IOException {
        try {
    deleteFootnoteWithHttpInfo(request);
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
    deleteFootnoteWithHttpInfo(request);
            }
            throw ex;
        }
    }

    /**
     * Removes a footnote from the document node.
     * @param request Request object
     * @return ApiResponse< void >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< Void > deleteFootnoteWithHttpInfo(DeleteFootnoteRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = deleteFootnoteValidateBeforeCall(request, null, null);
        return apiClient.execute(call);
    }

    /**
     * Removes a footnote from the document node. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteFootnoteAsync(DeleteFootnoteRequest request, final ApiCallback< Void > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteFootnoteValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteFootnoteOnlineValidateBeforeCall(DeleteFootnoteOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Removes a footnote from the document node.
     * @param request Request object
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public File deleteFootnoteOnline(DeleteFootnoteOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< File > resp = deleteFootnoteOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< File > resp = deleteFootnoteOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Removes a footnote from the document node.
     * @param request Request object
     * @return ApiResponse< File >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< File > deleteFootnoteOnlineWithHttpInfo(DeleteFootnoteOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = deleteFootnoteOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        File data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< File >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Removes a footnote from the document node. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteFootnoteOnlineAsync(DeleteFootnoteOnlineRequest request, final ApiCallback< File > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteFootnoteOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteFormFieldValidateBeforeCall(DeleteFormFieldRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Removes a form field from the document node.
     * @param request Request object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public void deleteFormField(DeleteFormFieldRequest request) throws ApiException, MessagingException, IOException {
        try {
    deleteFormFieldWithHttpInfo(request);
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
    deleteFormFieldWithHttpInfo(request);
            }
            throw ex;
        }
    }

    /**
     * Removes a form field from the document node.
     * @param request Request object
     * @return ApiResponse< void >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< Void > deleteFormFieldWithHttpInfo(DeleteFormFieldRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = deleteFormFieldValidateBeforeCall(request, null, null);
        return apiClient.execute(call);
    }

    /**
     * Removes a form field from the document node. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteFormFieldAsync(DeleteFormFieldRequest request, final ApiCallback< Void > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteFormFieldValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteFormFieldOnlineValidateBeforeCall(DeleteFormFieldOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Removes a form field from the document node.
     * @param request Request object
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public File deleteFormFieldOnline(DeleteFormFieldOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< File > resp = deleteFormFieldOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< File > resp = deleteFormFieldOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Removes a form field from the document node.
     * @param request Request object
     * @return ApiResponse< File >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< File > deleteFormFieldOnlineWithHttpInfo(DeleteFormFieldOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = deleteFormFieldOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        File data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< File >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Removes a form field from the document node. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteFormFieldOnlineAsync(DeleteFormFieldOnlineRequest request, final ApiCallback< File > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteFormFieldOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteHeaderFooterValidateBeforeCall(DeleteHeaderFooterRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Removes a HeaderFooter object from the document section.
     * @param request Request object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public void deleteHeaderFooter(DeleteHeaderFooterRequest request) throws ApiException, MessagingException, IOException {
        try {
    deleteHeaderFooterWithHttpInfo(request);
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
    deleteHeaderFooterWithHttpInfo(request);
            }
            throw ex;
        }
    }

    /**
     * Removes a HeaderFooter object from the document section.
     * @param request Request object
     * @return ApiResponse< void >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< Void > deleteHeaderFooterWithHttpInfo(DeleteHeaderFooterRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = deleteHeaderFooterValidateBeforeCall(request, null, null);
        return apiClient.execute(call);
    }

    /**
     * Removes a HeaderFooter object from the document section. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteHeaderFooterAsync(DeleteHeaderFooterRequest request, final ApiCallback< Void > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteHeaderFooterValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteHeaderFooterOnlineValidateBeforeCall(DeleteHeaderFooterOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Removes a HeaderFooter object from the document section.
     * @param request Request object
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public File deleteHeaderFooterOnline(DeleteHeaderFooterOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< File > resp = deleteHeaderFooterOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< File > resp = deleteHeaderFooterOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Removes a HeaderFooter object from the document section.
     * @param request Request object
     * @return ApiResponse< File >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< File > deleteHeaderFooterOnlineWithHttpInfo(DeleteHeaderFooterOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = deleteHeaderFooterOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        File data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< File >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Removes a HeaderFooter object from the document section. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteHeaderFooterOnlineAsync(DeleteHeaderFooterOnlineRequest request, final ApiCallback< File > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteHeaderFooterOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteHeadersFootersValidateBeforeCall(DeleteHeadersFootersRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Removes HeaderFooter objects from the document section.
     * @param request Request object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public void deleteHeadersFooters(DeleteHeadersFootersRequest request) throws ApiException, MessagingException, IOException {
        try {
    deleteHeadersFootersWithHttpInfo(request);
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
    deleteHeadersFootersWithHttpInfo(request);
            }
            throw ex;
        }
    }

    /**
     * Removes HeaderFooter objects from the document section.
     * @param request Request object
     * @return ApiResponse< void >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< Void > deleteHeadersFootersWithHttpInfo(DeleteHeadersFootersRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = deleteHeadersFootersValidateBeforeCall(request, null, null);
        return apiClient.execute(call);
    }

    /**
     * Removes HeaderFooter objects from the document section. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteHeadersFootersAsync(DeleteHeadersFootersRequest request, final ApiCallback< Void > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteHeadersFootersValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteHeadersFootersOnlineValidateBeforeCall(DeleteHeadersFootersOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Removes HeaderFooter objects from the document section.
     * @param request Request object
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public File deleteHeadersFootersOnline(DeleteHeadersFootersOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< File > resp = deleteHeadersFootersOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< File > resp = deleteHeadersFootersOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Removes HeaderFooter objects from the document section.
     * @param request Request object
     * @return ApiResponse< File >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< File > deleteHeadersFootersOnlineWithHttpInfo(DeleteHeadersFootersOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = deleteHeadersFootersOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        File data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< File >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Removes HeaderFooter objects from the document section. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteHeadersFootersOnlineAsync(DeleteHeadersFootersOnlineRequest request, final ApiCallback< File > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteHeadersFootersOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteMacrosValidateBeforeCall(DeleteMacrosRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Removes macros from the document.
     * @param request Request object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public void deleteMacros(DeleteMacrosRequest request) throws ApiException, MessagingException, IOException {
        try {
    deleteMacrosWithHttpInfo(request);
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
    deleteMacrosWithHttpInfo(request);
            }
            throw ex;
        }
    }

    /**
     * Removes macros from the document.
     * @param request Request object
     * @return ApiResponse< void >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< Void > deleteMacrosWithHttpInfo(DeleteMacrosRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = deleteMacrosValidateBeforeCall(request, null, null);
        return apiClient.execute(call);
    }

    /**
     * Removes macros from the document. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteMacrosAsync(DeleteMacrosRequest request, final ApiCallback< Void > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteMacrosValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteMacrosOnlineValidateBeforeCall(DeleteMacrosOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Removes macros from the document.
     * @param request Request object
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public File deleteMacrosOnline(DeleteMacrosOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< File > resp = deleteMacrosOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< File > resp = deleteMacrosOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Removes macros from the document.
     * @param request Request object
     * @return ApiResponse< File >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< File > deleteMacrosOnlineWithHttpInfo(DeleteMacrosOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = deleteMacrosOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        File data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< File >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Removes macros from the document. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteMacrosOnlineAsync(DeleteMacrosOnlineRequest request, final ApiCallback< File > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteMacrosOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteOfficeMathObjectValidateBeforeCall(DeleteOfficeMathObjectRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Removes an OfficeMath object from the document node.
     * @param request Request object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public void deleteOfficeMathObject(DeleteOfficeMathObjectRequest request) throws ApiException, MessagingException, IOException {
        try {
    deleteOfficeMathObjectWithHttpInfo(request);
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
    deleteOfficeMathObjectWithHttpInfo(request);
            }
            throw ex;
        }
    }

    /**
     * Removes an OfficeMath object from the document node.
     * @param request Request object
     * @return ApiResponse< void >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< Void > deleteOfficeMathObjectWithHttpInfo(DeleteOfficeMathObjectRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = deleteOfficeMathObjectValidateBeforeCall(request, null, null);
        return apiClient.execute(call);
    }

    /**
     * Removes an OfficeMath object from the document node. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteOfficeMathObjectAsync(DeleteOfficeMathObjectRequest request, final ApiCallback< Void > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteOfficeMathObjectValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteOfficeMathObjectOnlineValidateBeforeCall(DeleteOfficeMathObjectOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Removes an OfficeMath object from the document node.
     * @param request Request object
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public File deleteOfficeMathObjectOnline(DeleteOfficeMathObjectOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< File > resp = deleteOfficeMathObjectOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< File > resp = deleteOfficeMathObjectOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Removes an OfficeMath object from the document node.
     * @param request Request object
     * @return ApiResponse< File >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< File > deleteOfficeMathObjectOnlineWithHttpInfo(DeleteOfficeMathObjectOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = deleteOfficeMathObjectOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        File data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< File >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Removes an OfficeMath object from the document node. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteOfficeMathObjectOnlineAsync(DeleteOfficeMathObjectOnlineRequest request, final ApiCallback< File > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteOfficeMathObjectOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteParagraphValidateBeforeCall(DeleteParagraphRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Removes a paragraph from the document node.
     * @param request Request object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public void deleteParagraph(DeleteParagraphRequest request) throws ApiException, MessagingException, IOException {
        try {
    deleteParagraphWithHttpInfo(request);
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
    deleteParagraphWithHttpInfo(request);
            }
            throw ex;
        }
    }

    /**
     * Removes a paragraph from the document node.
     * @param request Request object
     * @return ApiResponse< void >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< Void > deleteParagraphWithHttpInfo(DeleteParagraphRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = deleteParagraphValidateBeforeCall(request, null, null);
        return apiClient.execute(call);
    }

    /**
     * Removes a paragraph from the document node. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteParagraphAsync(DeleteParagraphRequest request, final ApiCallback< Void > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteParagraphValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteParagraphListFormatValidateBeforeCall(DeleteParagraphListFormatRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Removes the formatting properties of a paragraph list from the document node.
     * @param request Request object
     * @return ParagraphListFormatResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public ParagraphListFormatResponse deleteParagraphListFormat(DeleteParagraphListFormatRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< ParagraphListFormatResponse > resp = deleteParagraphListFormatWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< ParagraphListFormatResponse > resp = deleteParagraphListFormatWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Removes the formatting properties of a paragraph list from the document node.
     * @param request Request object
     * @return ApiResponse< ParagraphListFormatResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< ParagraphListFormatResponse > deleteParagraphListFormatWithHttpInfo(DeleteParagraphListFormatRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = deleteParagraphListFormatValidateBeforeCall(request, null, null);
        Response response = call.execute();
        ParagraphListFormatResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< ParagraphListFormatResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Removes the formatting properties of a paragraph list from the document node. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteParagraphListFormatAsync(DeleteParagraphListFormatRequest request, final ApiCallback< ParagraphListFormatResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteParagraphListFormatValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteParagraphListFormatOnlineValidateBeforeCall(DeleteParagraphListFormatOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Removes the formatting properties of a paragraph list from the document node.
     * @param request Request object
     * @return DeleteParagraphListFormatOnlineResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public DeleteParagraphListFormatOnlineResponse deleteParagraphListFormatOnline(DeleteParagraphListFormatOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< DeleteParagraphListFormatOnlineResponse > resp = deleteParagraphListFormatOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< DeleteParagraphListFormatOnlineResponse > resp = deleteParagraphListFormatOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Removes the formatting properties of a paragraph list from the document node.
     * @param request Request object
     * @return ApiResponse< DeleteParagraphListFormatOnlineResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< DeleteParagraphListFormatOnlineResponse > deleteParagraphListFormatOnlineWithHttpInfo(DeleteParagraphListFormatOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = deleteParagraphListFormatOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        DeleteParagraphListFormatOnlineResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< DeleteParagraphListFormatOnlineResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Removes the formatting properties of a paragraph list from the document node. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteParagraphListFormatOnlineAsync(DeleteParagraphListFormatOnlineRequest request, final ApiCallback< DeleteParagraphListFormatOnlineResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteParagraphListFormatOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteParagraphOnlineValidateBeforeCall(DeleteParagraphOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Removes a paragraph from the document node.
     * @param request Request object
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public File deleteParagraphOnline(DeleteParagraphOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< File > resp = deleteParagraphOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< File > resp = deleteParagraphOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Removes a paragraph from the document node.
     * @param request Request object
     * @return ApiResponse< File >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< File > deleteParagraphOnlineWithHttpInfo(DeleteParagraphOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = deleteParagraphOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        File data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< File >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Removes a paragraph from the document node. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteParagraphOnlineAsync(DeleteParagraphOnlineRequest request, final ApiCallback< File > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteParagraphOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteParagraphTabStopValidateBeforeCall(DeleteParagraphTabStopRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Removes a paragraph tab stop from the document node.
     * @param request Request object
     * @return TabStopsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public TabStopsResponse deleteParagraphTabStop(DeleteParagraphTabStopRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< TabStopsResponse > resp = deleteParagraphTabStopWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< TabStopsResponse > resp = deleteParagraphTabStopWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Removes a paragraph tab stop from the document node.
     * @param request Request object
     * @return ApiResponse< TabStopsResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< TabStopsResponse > deleteParagraphTabStopWithHttpInfo(DeleteParagraphTabStopRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = deleteParagraphTabStopValidateBeforeCall(request, null, null);
        Response response = call.execute();
        TabStopsResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< TabStopsResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Removes a paragraph tab stop from the document node. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteParagraphTabStopAsync(DeleteParagraphTabStopRequest request, final ApiCallback< TabStopsResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteParagraphTabStopValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteParagraphTabStopOnlineValidateBeforeCall(DeleteParagraphTabStopOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Removes a paragraph tab stop from the document node.
     * @param request Request object
     * @return DeleteParagraphTabStopOnlineResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public DeleteParagraphTabStopOnlineResponse deleteParagraphTabStopOnline(DeleteParagraphTabStopOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< DeleteParagraphTabStopOnlineResponse > resp = deleteParagraphTabStopOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< DeleteParagraphTabStopOnlineResponse > resp = deleteParagraphTabStopOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Removes a paragraph tab stop from the document node.
     * @param request Request object
     * @return ApiResponse< DeleteParagraphTabStopOnlineResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< DeleteParagraphTabStopOnlineResponse > deleteParagraphTabStopOnlineWithHttpInfo(DeleteParagraphTabStopOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = deleteParagraphTabStopOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        DeleteParagraphTabStopOnlineResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< DeleteParagraphTabStopOnlineResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Removes a paragraph tab stop from the document node. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteParagraphTabStopOnlineAsync(DeleteParagraphTabStopOnlineRequest request, final ApiCallback< DeleteParagraphTabStopOnlineResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteParagraphTabStopOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteRunValidateBeforeCall(DeleteRunRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Removes a Run object from the paragraph.
     * @param request Request object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public void deleteRun(DeleteRunRequest request) throws ApiException, MessagingException, IOException {
        try {
    deleteRunWithHttpInfo(request);
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
    deleteRunWithHttpInfo(request);
            }
            throw ex;
        }
    }

    /**
     * Removes a Run object from the paragraph.
     * @param request Request object
     * @return ApiResponse< void >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< Void > deleteRunWithHttpInfo(DeleteRunRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = deleteRunValidateBeforeCall(request, null, null);
        return apiClient.execute(call);
    }

    /**
     * Removes a Run object from the paragraph. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteRunAsync(DeleteRunRequest request, final ApiCallback< Void > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteRunValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteRunOnlineValidateBeforeCall(DeleteRunOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Removes a Run object from the paragraph.
     * @param request Request object
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public File deleteRunOnline(DeleteRunOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< File > resp = deleteRunOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< File > resp = deleteRunOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Removes a Run object from the paragraph.
     * @param request Request object
     * @return ApiResponse< File >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< File > deleteRunOnlineWithHttpInfo(DeleteRunOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = deleteRunOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        File data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< File >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Removes a Run object from the paragraph. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteRunOnlineAsync(DeleteRunOnlineRequest request, final ApiCallback< File > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteRunOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteSectionValidateBeforeCall(DeleteSectionRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Removes a section from the document.
     * @param request Request object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public void deleteSection(DeleteSectionRequest request) throws ApiException, MessagingException, IOException {
        try {
    deleteSectionWithHttpInfo(request);
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
    deleteSectionWithHttpInfo(request);
            }
            throw ex;
        }
    }

    /**
     * Removes a section from the document.
     * @param request Request object
     * @return ApiResponse< void >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< Void > deleteSectionWithHttpInfo(DeleteSectionRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = deleteSectionValidateBeforeCall(request, null, null);
        return apiClient.execute(call);
    }

    /**
     * Removes a section from the document. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteSectionAsync(DeleteSectionRequest request, final ApiCallback< Void > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteSectionValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteSectionOnlineValidateBeforeCall(DeleteSectionOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Removes a section from the document.
     * @param request Request object
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public File deleteSectionOnline(DeleteSectionOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< File > resp = deleteSectionOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< File > resp = deleteSectionOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Removes a section from the document.
     * @param request Request object
     * @return ApiResponse< File >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< File > deleteSectionOnlineWithHttpInfo(DeleteSectionOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = deleteSectionOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        File data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< File >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Removes a section from the document. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteSectionOnlineAsync(DeleteSectionOnlineRequest request, final ApiCallback< File > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteSectionOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteTableValidateBeforeCall(DeleteTableRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Removes a table from the document node.
     * @param request Request object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public void deleteTable(DeleteTableRequest request) throws ApiException, MessagingException, IOException {
        try {
    deleteTableWithHttpInfo(request);
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
    deleteTableWithHttpInfo(request);
            }
            throw ex;
        }
    }

    /**
     * Removes a table from the document node.
     * @param request Request object
     * @return ApiResponse< void >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< Void > deleteTableWithHttpInfo(DeleteTableRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = deleteTableValidateBeforeCall(request, null, null);
        return apiClient.execute(call);
    }

    /**
     * Removes a table from the document node. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteTableAsync(DeleteTableRequest request, final ApiCallback< Void > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteTableValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteTableCellValidateBeforeCall(DeleteTableCellRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Removes a cell from the table row.
     * @param request Request object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public void deleteTableCell(DeleteTableCellRequest request) throws ApiException, MessagingException, IOException {
        try {
    deleteTableCellWithHttpInfo(request);
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
    deleteTableCellWithHttpInfo(request);
            }
            throw ex;
        }
    }

    /**
     * Removes a cell from the table row.
     * @param request Request object
     * @return ApiResponse< void >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< Void > deleteTableCellWithHttpInfo(DeleteTableCellRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = deleteTableCellValidateBeforeCall(request, null, null);
        return apiClient.execute(call);
    }

    /**
     * Removes a cell from the table row. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteTableCellAsync(DeleteTableCellRequest request, final ApiCallback< Void > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteTableCellValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteTableCellOnlineValidateBeforeCall(DeleteTableCellOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Removes a cell from the table row.
     * @param request Request object
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public File deleteTableCellOnline(DeleteTableCellOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< File > resp = deleteTableCellOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< File > resp = deleteTableCellOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Removes a cell from the table row.
     * @param request Request object
     * @return ApiResponse< File >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< File > deleteTableCellOnlineWithHttpInfo(DeleteTableCellOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = deleteTableCellOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        File data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< File >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Removes a cell from the table row. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteTableCellOnlineAsync(DeleteTableCellOnlineRequest request, final ApiCallback< File > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteTableCellOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteTableOnlineValidateBeforeCall(DeleteTableOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Removes a table from the document node.
     * @param request Request object
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public File deleteTableOnline(DeleteTableOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< File > resp = deleteTableOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< File > resp = deleteTableOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Removes a table from the document node.
     * @param request Request object
     * @return ApiResponse< File >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< File > deleteTableOnlineWithHttpInfo(DeleteTableOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = deleteTableOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        File data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< File >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Removes a table from the document node. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteTableOnlineAsync(DeleteTableOnlineRequest request, final ApiCallback< File > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteTableOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteTableRowValidateBeforeCall(DeleteTableRowRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Removes a row from the table.
     * @param request Request object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public void deleteTableRow(DeleteTableRowRequest request) throws ApiException, MessagingException, IOException {
        try {
    deleteTableRowWithHttpInfo(request);
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
    deleteTableRowWithHttpInfo(request);
            }
            throw ex;
        }
    }

    /**
     * Removes a row from the table.
     * @param request Request object
     * @return ApiResponse< void >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< Void > deleteTableRowWithHttpInfo(DeleteTableRowRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = deleteTableRowValidateBeforeCall(request, null, null);
        return apiClient.execute(call);
    }

    /**
     * Removes a row from the table. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteTableRowAsync(DeleteTableRowRequest request, final ApiCallback< Void > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteTableRowValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteTableRowOnlineValidateBeforeCall(DeleteTableRowOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Removes a row from the table.
     * @param request Request object
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public File deleteTableRowOnline(DeleteTableRowOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< File > resp = deleteTableRowOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< File > resp = deleteTableRowOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Removes a row from the table.
     * @param request Request object
     * @return ApiResponse< File >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< File > deleteTableRowOnlineWithHttpInfo(DeleteTableRowOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = deleteTableRowOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        File data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< File >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Removes a row from the table. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteTableRowOnlineAsync(DeleteTableRowOnlineRequest request, final ApiCallback< File > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteTableRowOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteWatermarkValidateBeforeCall(DeleteWatermarkRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Removes a watermark from the document.
     * @param request Request object
     * @return DocumentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public DocumentResponse deleteWatermark(DeleteWatermarkRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< DocumentResponse > resp = deleteWatermarkWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< DocumentResponse > resp = deleteWatermarkWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Removes a watermark from the document.
     * @param request Request object
     * @return ApiResponse< DocumentResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< DocumentResponse > deleteWatermarkWithHttpInfo(DeleteWatermarkRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = deleteWatermarkValidateBeforeCall(request, null, null);
        Response response = call.execute();
        DocumentResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< DocumentResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Removes a watermark from the document. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteWatermarkAsync(DeleteWatermarkRequest request, final ApiCallback< DocumentResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteWatermarkValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteWatermarkOnlineValidateBeforeCall(DeleteWatermarkOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Removes a watermark from the document.
     * @param request Request object
     * @return DeleteWatermarkOnlineResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public DeleteWatermarkOnlineResponse deleteWatermarkOnline(DeleteWatermarkOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< DeleteWatermarkOnlineResponse > resp = deleteWatermarkOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< DeleteWatermarkOnlineResponse > resp = deleteWatermarkOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Removes a watermark from the document.
     * @param request Request object
     * @return ApiResponse< DeleteWatermarkOnlineResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< DeleteWatermarkOnlineResponse > deleteWatermarkOnlineWithHttpInfo(DeleteWatermarkOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = deleteWatermarkOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        DeleteWatermarkOnlineResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< DeleteWatermarkOnlineResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Removes a watermark from the document. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteWatermarkOnlineAsync(DeleteWatermarkOnlineRequest request, final ApiCallback< DeleteWatermarkOnlineResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteWatermarkOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call downloadFileValidateBeforeCall(DownloadFileRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Download file.
     * @param request Request object
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public File downloadFile(DownloadFileRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< File > resp = downloadFileWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< File > resp = downloadFileWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Download file.
     * @param request Request object
     * @return ApiResponse< File >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< File > downloadFileWithHttpInfo(DownloadFileRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = downloadFileValidateBeforeCall(request, null, null);
        Response response = call.execute();
        File data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< File >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Download file. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call downloadFileAsync(DownloadFileRequest request, final ApiCallback< File > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = downloadFileValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call executeMailMergeValidateBeforeCall(ExecuteMailMergeRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Executes a Mail Merge operation.
     * @param request Request object
     * @return DocumentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public DocumentResponse executeMailMerge(ExecuteMailMergeRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< DocumentResponse > resp = executeMailMergeWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< DocumentResponse > resp = executeMailMergeWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Executes a Mail Merge operation.
     * @param request Request object
     * @return ApiResponse< DocumentResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< DocumentResponse > executeMailMergeWithHttpInfo(ExecuteMailMergeRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = executeMailMergeValidateBeforeCall(request, null, null);
        Response response = call.execute();
        DocumentResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< DocumentResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Executes a Mail Merge operation. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call executeMailMergeAsync(ExecuteMailMergeRequest request, final ApiCallback< DocumentResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = executeMailMergeValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call executeMailMergeOnlineValidateBeforeCall(ExecuteMailMergeOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Executes a Mail Merge operation online.
     * @param request Request object
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public File executeMailMergeOnline(ExecuteMailMergeOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< File > resp = executeMailMergeOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< File > resp = executeMailMergeOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Executes a Mail Merge operation online.
     * @param request Request object
     * @return ApiResponse< File >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< File > executeMailMergeOnlineWithHttpInfo(ExecuteMailMergeOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = executeMailMergeOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        File data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< File >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Executes a Mail Merge operation online. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call executeMailMergeOnlineAsync(ExecuteMailMergeOnlineRequest request, final ApiCallback< File > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = executeMailMergeOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAvailableFontsValidateBeforeCall(GetAvailableFontsRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Reads available fonts from the document.
     * @param request Request object
     * @return AvailableFontsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public AvailableFontsResponse getAvailableFonts(GetAvailableFontsRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< AvailableFontsResponse > resp = getAvailableFontsWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< AvailableFontsResponse > resp = getAvailableFontsWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Reads available fonts from the document.
     * @param request Request object
     * @return ApiResponse< AvailableFontsResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< AvailableFontsResponse > getAvailableFontsWithHttpInfo(GetAvailableFontsRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = getAvailableFontsValidateBeforeCall(request, null, null);
        Response response = call.execute();
        AvailableFontsResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< AvailableFontsResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Reads available fonts from the document. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAvailableFontsAsync(GetAvailableFontsRequest request, final ApiCallback< AvailableFontsResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAvailableFontsValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBookmarkByNameValidateBeforeCall(GetBookmarkByNameRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Reads a bookmark, specified by name, from the document.
     * @param request Request object
     * @return BookmarkResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public BookmarkResponse getBookmarkByName(GetBookmarkByNameRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< BookmarkResponse > resp = getBookmarkByNameWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< BookmarkResponse > resp = getBookmarkByNameWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Reads a bookmark, specified by name, from the document.
     * @param request Request object
     * @return ApiResponse< BookmarkResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< BookmarkResponse > getBookmarkByNameWithHttpInfo(GetBookmarkByNameRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = getBookmarkByNameValidateBeforeCall(request, null, null);
        Response response = call.execute();
        BookmarkResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< BookmarkResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Reads a bookmark, specified by name, from the document. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBookmarkByNameAsync(GetBookmarkByNameRequest request, final ApiCallback< BookmarkResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBookmarkByNameValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBookmarkByNameOnlineValidateBeforeCall(GetBookmarkByNameOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Reads a bookmark, specified by name, from the document.
     * @param request Request object
     * @return BookmarkResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public BookmarkResponse getBookmarkByNameOnline(GetBookmarkByNameOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< BookmarkResponse > resp = getBookmarkByNameOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< BookmarkResponse > resp = getBookmarkByNameOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Reads a bookmark, specified by name, from the document.
     * @param request Request object
     * @return ApiResponse< BookmarkResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< BookmarkResponse > getBookmarkByNameOnlineWithHttpInfo(GetBookmarkByNameOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = getBookmarkByNameOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        BookmarkResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< BookmarkResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Reads a bookmark, specified by name, from the document. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBookmarkByNameOnlineAsync(GetBookmarkByNameOnlineRequest request, final ApiCallback< BookmarkResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBookmarkByNameOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBookmarksValidateBeforeCall(GetBookmarksRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Reads bookmarks from the document.
     * @param request Request object
     * @return BookmarksResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public BookmarksResponse getBookmarks(GetBookmarksRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< BookmarksResponse > resp = getBookmarksWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< BookmarksResponse > resp = getBookmarksWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Reads bookmarks from the document.
     * @param request Request object
     * @return ApiResponse< BookmarksResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< BookmarksResponse > getBookmarksWithHttpInfo(GetBookmarksRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = getBookmarksValidateBeforeCall(request, null, null);
        Response response = call.execute();
        BookmarksResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< BookmarksResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Reads bookmarks from the document. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBookmarksAsync(GetBookmarksRequest request, final ApiCallback< BookmarksResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBookmarksValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBookmarksOnlineValidateBeforeCall(GetBookmarksOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Reads bookmarks from the document.
     * @param request Request object
     * @return BookmarksResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public BookmarksResponse getBookmarksOnline(GetBookmarksOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< BookmarksResponse > resp = getBookmarksOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< BookmarksResponse > resp = getBookmarksOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Reads bookmarks from the document.
     * @param request Request object
     * @return ApiResponse< BookmarksResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< BookmarksResponse > getBookmarksOnlineWithHttpInfo(GetBookmarksOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = getBookmarksOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        BookmarksResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< BookmarksResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Reads bookmarks from the document. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBookmarksOnlineAsync(GetBookmarksOnlineRequest request, final ApiCallback< BookmarksResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBookmarksOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBorderValidateBeforeCall(GetBorderRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * The 'nodePath' parameter should refer to a paragraph, a cell or a row.
     * @param request Request object
     * @return BorderResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public BorderResponse getBorder(GetBorderRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< BorderResponse > resp = getBorderWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< BorderResponse > resp = getBorderWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * The 'nodePath' parameter should refer to a paragraph, a cell or a row.
     * @param request Request object
     * @return ApiResponse< BorderResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< BorderResponse > getBorderWithHttpInfo(GetBorderRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = getBorderValidateBeforeCall(request, null, null);
        Response response = call.execute();
        BorderResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< BorderResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * The 'nodePath' parameter should refer to a paragraph, a cell or a row. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBorderAsync(GetBorderRequest request, final ApiCallback< BorderResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBorderValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBorderOnlineValidateBeforeCall(GetBorderOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Reads a border from the document node.
     * @param request Request object
     * @return BorderResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public BorderResponse getBorderOnline(GetBorderOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< BorderResponse > resp = getBorderOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< BorderResponse > resp = getBorderOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Reads a border from the document node.
     * @param request Request object
     * @return ApiResponse< BorderResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< BorderResponse > getBorderOnlineWithHttpInfo(GetBorderOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = getBorderOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        BorderResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< BorderResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Reads a border from the document node. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBorderOnlineAsync(GetBorderOnlineRequest request, final ApiCallback< BorderResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBorderOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBordersValidateBeforeCall(GetBordersRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Reads borders from the document node.
     * @param request Request object
     * @return BordersResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public BordersResponse getBorders(GetBordersRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< BordersResponse > resp = getBordersWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< BordersResponse > resp = getBordersWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Reads borders from the document node.
     * @param request Request object
     * @return ApiResponse< BordersResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< BordersResponse > getBordersWithHttpInfo(GetBordersRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = getBordersValidateBeforeCall(request, null, null);
        Response response = call.execute();
        BordersResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< BordersResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Reads borders from the document node. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBordersAsync(GetBordersRequest request, final ApiCallback< BordersResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBordersValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBordersOnlineValidateBeforeCall(GetBordersOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Reads borders from the document node.
     * @param request Request object
     * @return BordersResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public BordersResponse getBordersOnline(GetBordersOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< BordersResponse > resp = getBordersOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< BordersResponse > resp = getBordersOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Reads borders from the document node.
     * @param request Request object
     * @return ApiResponse< BordersResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< BordersResponse > getBordersOnlineWithHttpInfo(GetBordersOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = getBordersOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        BordersResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< BordersResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Reads borders from the document node. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBordersOnlineAsync(GetBordersOnlineRequest request, final ApiCallback< BordersResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBordersOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCommentValidateBeforeCall(GetCommentRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Reads a comment from the document.
     * @param request Request object
     * @return CommentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public CommentResponse getComment(GetCommentRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< CommentResponse > resp = getCommentWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< CommentResponse > resp = getCommentWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Reads a comment from the document.
     * @param request Request object
     * @return ApiResponse< CommentResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< CommentResponse > getCommentWithHttpInfo(GetCommentRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = getCommentValidateBeforeCall(request, null, null);
        Response response = call.execute();
        CommentResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< CommentResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Reads a comment from the document. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCommentAsync(GetCommentRequest request, final ApiCallback< CommentResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCommentValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCommentOnlineValidateBeforeCall(GetCommentOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Reads a comment from the document.
     * @param request Request object
     * @return CommentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public CommentResponse getCommentOnline(GetCommentOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< CommentResponse > resp = getCommentOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< CommentResponse > resp = getCommentOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Reads a comment from the document.
     * @param request Request object
     * @return ApiResponse< CommentResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< CommentResponse > getCommentOnlineWithHttpInfo(GetCommentOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = getCommentOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        CommentResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< CommentResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Reads a comment from the document. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCommentOnlineAsync(GetCommentOnlineRequest request, final ApiCallback< CommentResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCommentOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCommentsValidateBeforeCall(GetCommentsRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Reads comments from the document.
     * @param request Request object
     * @return CommentsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public CommentsResponse getComments(GetCommentsRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< CommentsResponse > resp = getCommentsWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< CommentsResponse > resp = getCommentsWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Reads comments from the document.
     * @param request Request object
     * @return ApiResponse< CommentsResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< CommentsResponse > getCommentsWithHttpInfo(GetCommentsRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = getCommentsValidateBeforeCall(request, null, null);
        Response response = call.execute();
        CommentsResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< CommentsResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Reads comments from the document. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCommentsAsync(GetCommentsRequest request, final ApiCallback< CommentsResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCommentsValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCommentsOnlineValidateBeforeCall(GetCommentsOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Reads comments from the document.
     * @param request Request object
     * @return CommentsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public CommentsResponse getCommentsOnline(GetCommentsOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< CommentsResponse > resp = getCommentsOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< CommentsResponse > resp = getCommentsOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Reads comments from the document.
     * @param request Request object
     * @return ApiResponse< CommentsResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< CommentsResponse > getCommentsOnlineWithHttpInfo(GetCommentsOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = getCommentsOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        CommentsResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< CommentsResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Reads comments from the document. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCommentsOnlineAsync(GetCommentsOnlineRequest request, final ApiCallback< CommentsResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCommentsOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDocumentValidateBeforeCall(GetDocumentRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Reads common information from the document.
     * @param request Request object
     * @return DocumentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public DocumentResponse getDocument(GetDocumentRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< DocumentResponse > resp = getDocumentWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< DocumentResponse > resp = getDocumentWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Reads common information from the document.
     * @param request Request object
     * @return ApiResponse< DocumentResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< DocumentResponse > getDocumentWithHttpInfo(GetDocumentRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = getDocumentValidateBeforeCall(request, null, null);
        Response response = call.execute();
        DocumentResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< DocumentResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Reads common information from the document. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDocumentAsync(GetDocumentRequest request, final ApiCallback< DocumentResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDocumentValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDocumentDrawingObjectByIndexValidateBeforeCall(GetDocumentDrawingObjectByIndexRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Reads a DrawingObject from the document node.
     * @param request Request object
     * @return DrawingObjectResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public DrawingObjectResponse getDocumentDrawingObjectByIndex(GetDocumentDrawingObjectByIndexRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< DrawingObjectResponse > resp = getDocumentDrawingObjectByIndexWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< DrawingObjectResponse > resp = getDocumentDrawingObjectByIndexWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Reads a DrawingObject from the document node.
     * @param request Request object
     * @return ApiResponse< DrawingObjectResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< DrawingObjectResponse > getDocumentDrawingObjectByIndexWithHttpInfo(GetDocumentDrawingObjectByIndexRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = getDocumentDrawingObjectByIndexValidateBeforeCall(request, null, null);
        Response response = call.execute();
        DrawingObjectResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< DrawingObjectResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Reads a DrawingObject from the document node. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDocumentDrawingObjectByIndexAsync(GetDocumentDrawingObjectByIndexRequest request, final ApiCallback< DrawingObjectResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDocumentDrawingObjectByIndexValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDocumentDrawingObjectByIndexOnlineValidateBeforeCall(GetDocumentDrawingObjectByIndexOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Reads a DrawingObject from the document node.
     * @param request Request object
     * @return DrawingObjectResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public DrawingObjectResponse getDocumentDrawingObjectByIndexOnline(GetDocumentDrawingObjectByIndexOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< DrawingObjectResponse > resp = getDocumentDrawingObjectByIndexOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< DrawingObjectResponse > resp = getDocumentDrawingObjectByIndexOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Reads a DrawingObject from the document node.
     * @param request Request object
     * @return ApiResponse< DrawingObjectResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< DrawingObjectResponse > getDocumentDrawingObjectByIndexOnlineWithHttpInfo(GetDocumentDrawingObjectByIndexOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = getDocumentDrawingObjectByIndexOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        DrawingObjectResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< DrawingObjectResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Reads a DrawingObject from the document node. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDocumentDrawingObjectByIndexOnlineAsync(GetDocumentDrawingObjectByIndexOnlineRequest request, final ApiCallback< DrawingObjectResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDocumentDrawingObjectByIndexOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDocumentDrawingObjectImageDataValidateBeforeCall(GetDocumentDrawingObjectImageDataRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Reads image data of a DrawingObject from the document node.
     * @param request Request object
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public File getDocumentDrawingObjectImageData(GetDocumentDrawingObjectImageDataRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< File > resp = getDocumentDrawingObjectImageDataWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< File > resp = getDocumentDrawingObjectImageDataWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Reads image data of a DrawingObject from the document node.
     * @param request Request object
     * @return ApiResponse< File >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< File > getDocumentDrawingObjectImageDataWithHttpInfo(GetDocumentDrawingObjectImageDataRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = getDocumentDrawingObjectImageDataValidateBeforeCall(request, null, null);
        Response response = call.execute();
        File data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< File >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Reads image data of a DrawingObject from the document node. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDocumentDrawingObjectImageDataAsync(GetDocumentDrawingObjectImageDataRequest request, final ApiCallback< File > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDocumentDrawingObjectImageDataValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDocumentDrawingObjectImageDataOnlineValidateBeforeCall(GetDocumentDrawingObjectImageDataOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Reads image data of a DrawingObject from the document node.
     * @param request Request object
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public File getDocumentDrawingObjectImageDataOnline(GetDocumentDrawingObjectImageDataOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< File > resp = getDocumentDrawingObjectImageDataOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< File > resp = getDocumentDrawingObjectImageDataOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Reads image data of a DrawingObject from the document node.
     * @param request Request object
     * @return ApiResponse< File >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< File > getDocumentDrawingObjectImageDataOnlineWithHttpInfo(GetDocumentDrawingObjectImageDataOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = getDocumentDrawingObjectImageDataOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        File data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< File >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Reads image data of a DrawingObject from the document node. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDocumentDrawingObjectImageDataOnlineAsync(GetDocumentDrawingObjectImageDataOnlineRequest request, final ApiCallback< File > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDocumentDrawingObjectImageDataOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDocumentDrawingObjectOleDataValidateBeforeCall(GetDocumentDrawingObjectOleDataRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Reads OLE data of a DrawingObject from the document node.
     * @param request Request object
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public File getDocumentDrawingObjectOleData(GetDocumentDrawingObjectOleDataRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< File > resp = getDocumentDrawingObjectOleDataWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< File > resp = getDocumentDrawingObjectOleDataWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Reads OLE data of a DrawingObject from the document node.
     * @param request Request object
     * @return ApiResponse< File >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< File > getDocumentDrawingObjectOleDataWithHttpInfo(GetDocumentDrawingObjectOleDataRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = getDocumentDrawingObjectOleDataValidateBeforeCall(request, null, null);
        Response response = call.execute();
        File data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< File >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Reads OLE data of a DrawingObject from the document node. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDocumentDrawingObjectOleDataAsync(GetDocumentDrawingObjectOleDataRequest request, final ApiCallback< File > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDocumentDrawingObjectOleDataValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDocumentDrawingObjectOleDataOnlineValidateBeforeCall(GetDocumentDrawingObjectOleDataOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Reads OLE data of a DrawingObject from the document node.
     * @param request Request object
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public File getDocumentDrawingObjectOleDataOnline(GetDocumentDrawingObjectOleDataOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< File > resp = getDocumentDrawingObjectOleDataOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< File > resp = getDocumentDrawingObjectOleDataOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Reads OLE data of a DrawingObject from the document node.
     * @param request Request object
     * @return ApiResponse< File >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< File > getDocumentDrawingObjectOleDataOnlineWithHttpInfo(GetDocumentDrawingObjectOleDataOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = getDocumentDrawingObjectOleDataOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        File data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< File >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Reads OLE data of a DrawingObject from the document node. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDocumentDrawingObjectOleDataOnlineAsync(GetDocumentDrawingObjectOleDataOnlineRequest request, final ApiCallback< File > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDocumentDrawingObjectOleDataOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDocumentDrawingObjectsValidateBeforeCall(GetDocumentDrawingObjectsRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Reads DrawingObjects from the document node.
     * @param request Request object
     * @return DrawingObjectsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public DrawingObjectsResponse getDocumentDrawingObjects(GetDocumentDrawingObjectsRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< DrawingObjectsResponse > resp = getDocumentDrawingObjectsWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< DrawingObjectsResponse > resp = getDocumentDrawingObjectsWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Reads DrawingObjects from the document node.
     * @param request Request object
     * @return ApiResponse< DrawingObjectsResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< DrawingObjectsResponse > getDocumentDrawingObjectsWithHttpInfo(GetDocumentDrawingObjectsRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = getDocumentDrawingObjectsValidateBeforeCall(request, null, null);
        Response response = call.execute();
        DrawingObjectsResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< DrawingObjectsResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Reads DrawingObjects from the document node. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDocumentDrawingObjectsAsync(GetDocumentDrawingObjectsRequest request, final ApiCallback< DrawingObjectsResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDocumentDrawingObjectsValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDocumentDrawingObjectsOnlineValidateBeforeCall(GetDocumentDrawingObjectsOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Reads DrawingObjects from the document node.
     * @param request Request object
     * @return DrawingObjectsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public DrawingObjectsResponse getDocumentDrawingObjectsOnline(GetDocumentDrawingObjectsOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< DrawingObjectsResponse > resp = getDocumentDrawingObjectsOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< DrawingObjectsResponse > resp = getDocumentDrawingObjectsOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Reads DrawingObjects from the document node.
     * @param request Request object
     * @return ApiResponse< DrawingObjectsResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< DrawingObjectsResponse > getDocumentDrawingObjectsOnlineWithHttpInfo(GetDocumentDrawingObjectsOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = getDocumentDrawingObjectsOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        DrawingObjectsResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< DrawingObjectsResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Reads DrawingObjects from the document node. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDocumentDrawingObjectsOnlineAsync(GetDocumentDrawingObjectsOnlineRequest request, final ApiCallback< DrawingObjectsResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDocumentDrawingObjectsOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDocumentFieldNamesValidateBeforeCall(GetDocumentFieldNamesRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Reads merge field names from the document.
     * @param request Request object
     * @return FieldNamesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public FieldNamesResponse getDocumentFieldNames(GetDocumentFieldNamesRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< FieldNamesResponse > resp = getDocumentFieldNamesWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< FieldNamesResponse > resp = getDocumentFieldNamesWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Reads merge field names from the document.
     * @param request Request object
     * @return ApiResponse< FieldNamesResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< FieldNamesResponse > getDocumentFieldNamesWithHttpInfo(GetDocumentFieldNamesRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = getDocumentFieldNamesValidateBeforeCall(request, null, null);
        Response response = call.execute();
        FieldNamesResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< FieldNamesResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Reads merge field names from the document. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDocumentFieldNamesAsync(GetDocumentFieldNamesRequest request, final ApiCallback< FieldNamesResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDocumentFieldNamesValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDocumentFieldNamesOnlineValidateBeforeCall(GetDocumentFieldNamesOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Reads merge field names from the document.
     * @param request Request object
     * @return FieldNamesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public FieldNamesResponse getDocumentFieldNamesOnline(GetDocumentFieldNamesOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< FieldNamesResponse > resp = getDocumentFieldNamesOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< FieldNamesResponse > resp = getDocumentFieldNamesOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Reads merge field names from the document.
     * @param request Request object
     * @return ApiResponse< FieldNamesResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< FieldNamesResponse > getDocumentFieldNamesOnlineWithHttpInfo(GetDocumentFieldNamesOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = getDocumentFieldNamesOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        FieldNamesResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< FieldNamesResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Reads merge field names from the document. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDocumentFieldNamesOnlineAsync(GetDocumentFieldNamesOnlineRequest request, final ApiCallback< FieldNamesResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDocumentFieldNamesOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDocumentHyperlinkByIndexValidateBeforeCall(GetDocumentHyperlinkByIndexRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Reads a hyperlink from the document.
     * @param request Request object
     * @return HyperlinkResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public HyperlinkResponse getDocumentHyperlinkByIndex(GetDocumentHyperlinkByIndexRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< HyperlinkResponse > resp = getDocumentHyperlinkByIndexWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< HyperlinkResponse > resp = getDocumentHyperlinkByIndexWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Reads a hyperlink from the document.
     * @param request Request object
     * @return ApiResponse< HyperlinkResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< HyperlinkResponse > getDocumentHyperlinkByIndexWithHttpInfo(GetDocumentHyperlinkByIndexRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = getDocumentHyperlinkByIndexValidateBeforeCall(request, null, null);
        Response response = call.execute();
        HyperlinkResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< HyperlinkResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Reads a hyperlink from the document. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDocumentHyperlinkByIndexAsync(GetDocumentHyperlinkByIndexRequest request, final ApiCallback< HyperlinkResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDocumentHyperlinkByIndexValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDocumentHyperlinkByIndexOnlineValidateBeforeCall(GetDocumentHyperlinkByIndexOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Reads a hyperlink from the document.
     * @param request Request object
     * @return HyperlinkResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public HyperlinkResponse getDocumentHyperlinkByIndexOnline(GetDocumentHyperlinkByIndexOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< HyperlinkResponse > resp = getDocumentHyperlinkByIndexOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< HyperlinkResponse > resp = getDocumentHyperlinkByIndexOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Reads a hyperlink from the document.
     * @param request Request object
     * @return ApiResponse< HyperlinkResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< HyperlinkResponse > getDocumentHyperlinkByIndexOnlineWithHttpInfo(GetDocumentHyperlinkByIndexOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = getDocumentHyperlinkByIndexOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        HyperlinkResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< HyperlinkResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Reads a hyperlink from the document. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDocumentHyperlinkByIndexOnlineAsync(GetDocumentHyperlinkByIndexOnlineRequest request, final ApiCallback< HyperlinkResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDocumentHyperlinkByIndexOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDocumentHyperlinksValidateBeforeCall(GetDocumentHyperlinksRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Reads hyperlinks from the document.
     * @param request Request object
     * @return HyperlinksResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public HyperlinksResponse getDocumentHyperlinks(GetDocumentHyperlinksRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< HyperlinksResponse > resp = getDocumentHyperlinksWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< HyperlinksResponse > resp = getDocumentHyperlinksWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Reads hyperlinks from the document.
     * @param request Request object
     * @return ApiResponse< HyperlinksResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< HyperlinksResponse > getDocumentHyperlinksWithHttpInfo(GetDocumentHyperlinksRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = getDocumentHyperlinksValidateBeforeCall(request, null, null);
        Response response = call.execute();
        HyperlinksResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< HyperlinksResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Reads hyperlinks from the document. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDocumentHyperlinksAsync(GetDocumentHyperlinksRequest request, final ApiCallback< HyperlinksResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDocumentHyperlinksValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDocumentHyperlinksOnlineValidateBeforeCall(GetDocumentHyperlinksOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Reads hyperlinks from the document.
     * @param request Request object
     * @return HyperlinksResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public HyperlinksResponse getDocumentHyperlinksOnline(GetDocumentHyperlinksOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< HyperlinksResponse > resp = getDocumentHyperlinksOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< HyperlinksResponse > resp = getDocumentHyperlinksOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Reads hyperlinks from the document.
     * @param request Request object
     * @return ApiResponse< HyperlinksResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< HyperlinksResponse > getDocumentHyperlinksOnlineWithHttpInfo(GetDocumentHyperlinksOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = getDocumentHyperlinksOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        HyperlinksResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< HyperlinksResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Reads hyperlinks from the document. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDocumentHyperlinksOnlineAsync(GetDocumentHyperlinksOnlineRequest request, final ApiCallback< HyperlinksResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDocumentHyperlinksOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDocumentPropertiesValidateBeforeCall(GetDocumentPropertiesRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Reads document properties.
     * @param request Request object
     * @return DocumentPropertiesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public DocumentPropertiesResponse getDocumentProperties(GetDocumentPropertiesRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< DocumentPropertiesResponse > resp = getDocumentPropertiesWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< DocumentPropertiesResponse > resp = getDocumentPropertiesWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Reads document properties.
     * @param request Request object
     * @return ApiResponse< DocumentPropertiesResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< DocumentPropertiesResponse > getDocumentPropertiesWithHttpInfo(GetDocumentPropertiesRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = getDocumentPropertiesValidateBeforeCall(request, null, null);
        Response response = call.execute();
        DocumentPropertiesResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< DocumentPropertiesResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Reads document properties. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDocumentPropertiesAsync(GetDocumentPropertiesRequest request, final ApiCallback< DocumentPropertiesResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDocumentPropertiesValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDocumentPropertiesOnlineValidateBeforeCall(GetDocumentPropertiesOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Reads document properties.
     * @param request Request object
     * @return DocumentPropertiesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public DocumentPropertiesResponse getDocumentPropertiesOnline(GetDocumentPropertiesOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< DocumentPropertiesResponse > resp = getDocumentPropertiesOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< DocumentPropertiesResponse > resp = getDocumentPropertiesOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Reads document properties.
     * @param request Request object
     * @return ApiResponse< DocumentPropertiesResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< DocumentPropertiesResponse > getDocumentPropertiesOnlineWithHttpInfo(GetDocumentPropertiesOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = getDocumentPropertiesOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        DocumentPropertiesResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< DocumentPropertiesResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Reads document properties. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDocumentPropertiesOnlineAsync(GetDocumentPropertiesOnlineRequest request, final ApiCallback< DocumentPropertiesResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDocumentPropertiesOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDocumentPropertyValidateBeforeCall(GetDocumentPropertyRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Reads a document property.
     * @param request Request object
     * @return DocumentPropertyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public DocumentPropertyResponse getDocumentProperty(GetDocumentPropertyRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< DocumentPropertyResponse > resp = getDocumentPropertyWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< DocumentPropertyResponse > resp = getDocumentPropertyWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Reads a document property.
     * @param request Request object
     * @return ApiResponse< DocumentPropertyResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< DocumentPropertyResponse > getDocumentPropertyWithHttpInfo(GetDocumentPropertyRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = getDocumentPropertyValidateBeforeCall(request, null, null);
        Response response = call.execute();
        DocumentPropertyResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< DocumentPropertyResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Reads a document property. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDocumentPropertyAsync(GetDocumentPropertyRequest request, final ApiCallback< DocumentPropertyResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDocumentPropertyValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDocumentPropertyOnlineValidateBeforeCall(GetDocumentPropertyOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Reads a document property.
     * @param request Request object
     * @return DocumentPropertyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public DocumentPropertyResponse getDocumentPropertyOnline(GetDocumentPropertyOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< DocumentPropertyResponse > resp = getDocumentPropertyOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< DocumentPropertyResponse > resp = getDocumentPropertyOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Reads a document property.
     * @param request Request object
     * @return ApiResponse< DocumentPropertyResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< DocumentPropertyResponse > getDocumentPropertyOnlineWithHttpInfo(GetDocumentPropertyOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = getDocumentPropertyOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        DocumentPropertyResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< DocumentPropertyResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Reads a document property. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDocumentPropertyOnlineAsync(GetDocumentPropertyOnlineRequest request, final ApiCallback< DocumentPropertyResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDocumentPropertyOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDocumentProtectionValidateBeforeCall(GetDocumentProtectionRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Reads protection properties from the document.
     * @param request Request object
     * @return ProtectionDataResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public ProtectionDataResponse getDocumentProtection(GetDocumentProtectionRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< ProtectionDataResponse > resp = getDocumentProtectionWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< ProtectionDataResponse > resp = getDocumentProtectionWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Reads protection properties from the document.
     * @param request Request object
     * @return ApiResponse< ProtectionDataResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< ProtectionDataResponse > getDocumentProtectionWithHttpInfo(GetDocumentProtectionRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = getDocumentProtectionValidateBeforeCall(request, null, null);
        Response response = call.execute();
        ProtectionDataResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< ProtectionDataResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Reads protection properties from the document. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDocumentProtectionAsync(GetDocumentProtectionRequest request, final ApiCallback< ProtectionDataResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDocumentProtectionValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDocumentProtectionOnlineValidateBeforeCall(GetDocumentProtectionOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Reads protection properties from the document.
     * @param request Request object
     * @return ProtectionDataResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public ProtectionDataResponse getDocumentProtectionOnline(GetDocumentProtectionOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< ProtectionDataResponse > resp = getDocumentProtectionOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< ProtectionDataResponse > resp = getDocumentProtectionOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Reads protection properties from the document.
     * @param request Request object
     * @return ApiResponse< ProtectionDataResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< ProtectionDataResponse > getDocumentProtectionOnlineWithHttpInfo(GetDocumentProtectionOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = getDocumentProtectionOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        ProtectionDataResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< ProtectionDataResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Reads protection properties from the document. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDocumentProtectionOnlineAsync(GetDocumentProtectionOnlineRequest request, final ApiCallback< ProtectionDataResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDocumentProtectionOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDocumentStatisticsValidateBeforeCall(GetDocumentStatisticsRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Reads document statistics.
     * @param request Request object
     * @return StatDataResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public StatDataResponse getDocumentStatistics(GetDocumentStatisticsRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< StatDataResponse > resp = getDocumentStatisticsWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< StatDataResponse > resp = getDocumentStatisticsWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Reads document statistics.
     * @param request Request object
     * @return ApiResponse< StatDataResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< StatDataResponse > getDocumentStatisticsWithHttpInfo(GetDocumentStatisticsRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = getDocumentStatisticsValidateBeforeCall(request, null, null);
        Response response = call.execute();
        StatDataResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< StatDataResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Reads document statistics. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDocumentStatisticsAsync(GetDocumentStatisticsRequest request, final ApiCallback< StatDataResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDocumentStatisticsValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDocumentStatisticsOnlineValidateBeforeCall(GetDocumentStatisticsOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Reads document statistics.
     * @param request Request object
     * @return StatDataResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public StatDataResponse getDocumentStatisticsOnline(GetDocumentStatisticsOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< StatDataResponse > resp = getDocumentStatisticsOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< StatDataResponse > resp = getDocumentStatisticsOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Reads document statistics.
     * @param request Request object
     * @return ApiResponse< StatDataResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< StatDataResponse > getDocumentStatisticsOnlineWithHttpInfo(GetDocumentStatisticsOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = getDocumentStatisticsOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        StatDataResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< StatDataResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Reads document statistics. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDocumentStatisticsOnlineAsync(GetDocumentStatisticsOnlineRequest request, final ApiCallback< StatDataResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDocumentStatisticsOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDocumentWithFormatValidateBeforeCall(GetDocumentWithFormatRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Converts a document in cloud storage to the specified format.
     * @param request Request object
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public File getDocumentWithFormat(GetDocumentWithFormatRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< File > resp = getDocumentWithFormatWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< File > resp = getDocumentWithFormatWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Converts a document in cloud storage to the specified format.
     * @param request Request object
     * @return ApiResponse< File >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< File > getDocumentWithFormatWithHttpInfo(GetDocumentWithFormatRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = getDocumentWithFormatValidateBeforeCall(request, null, null);
        Response response = call.execute();
        File data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< File >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Converts a document in cloud storage to the specified format. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDocumentWithFormatAsync(GetDocumentWithFormatRequest request, final ApiCallback< File > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDocumentWithFormatValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFieldValidateBeforeCall(GetFieldRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Reads a field from the document node.
     * @param request Request object
     * @return FieldResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public FieldResponse getField(GetFieldRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< FieldResponse > resp = getFieldWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< FieldResponse > resp = getFieldWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Reads a field from the document node.
     * @param request Request object
     * @return ApiResponse< FieldResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< FieldResponse > getFieldWithHttpInfo(GetFieldRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = getFieldValidateBeforeCall(request, null, null);
        Response response = call.execute();
        FieldResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< FieldResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Reads a field from the document node. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFieldAsync(GetFieldRequest request, final ApiCallback< FieldResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFieldValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFieldOnlineValidateBeforeCall(GetFieldOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Reads a field from the document node.
     * @param request Request object
     * @return FieldResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public FieldResponse getFieldOnline(GetFieldOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< FieldResponse > resp = getFieldOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< FieldResponse > resp = getFieldOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Reads a field from the document node.
     * @param request Request object
     * @return ApiResponse< FieldResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< FieldResponse > getFieldOnlineWithHttpInfo(GetFieldOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = getFieldOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        FieldResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< FieldResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Reads a field from the document node. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFieldOnlineAsync(GetFieldOnlineRequest request, final ApiCallback< FieldResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFieldOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFieldsValidateBeforeCall(GetFieldsRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Reads fields from the document node.
     * @param request Request object
     * @return FieldsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public FieldsResponse getFields(GetFieldsRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< FieldsResponse > resp = getFieldsWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< FieldsResponse > resp = getFieldsWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Reads fields from the document node.
     * @param request Request object
     * @return ApiResponse< FieldsResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< FieldsResponse > getFieldsWithHttpInfo(GetFieldsRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = getFieldsValidateBeforeCall(request, null, null);
        Response response = call.execute();
        FieldsResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< FieldsResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Reads fields from the document node. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFieldsAsync(GetFieldsRequest request, final ApiCallback< FieldsResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFieldsValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFieldsOnlineValidateBeforeCall(GetFieldsOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Reads fields from the document node.
     * @param request Request object
     * @return FieldsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public FieldsResponse getFieldsOnline(GetFieldsOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< FieldsResponse > resp = getFieldsOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< FieldsResponse > resp = getFieldsOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Reads fields from the document node.
     * @param request Request object
     * @return ApiResponse< FieldsResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< FieldsResponse > getFieldsOnlineWithHttpInfo(GetFieldsOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = getFieldsOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        FieldsResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< FieldsResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Reads fields from the document node. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFieldsOnlineAsync(GetFieldsOnlineRequest request, final ApiCallback< FieldsResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFieldsOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFilesListValidateBeforeCall(GetFilesListRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Get all files and folders within a folder.
     * @param request Request object
     * @return FilesList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public FilesList getFilesList(GetFilesListRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< FilesList > resp = getFilesListWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< FilesList > resp = getFilesListWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Get all files and folders within a folder.
     * @param request Request object
     * @return ApiResponse< FilesList >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< FilesList > getFilesListWithHttpInfo(GetFilesListRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = getFilesListValidateBeforeCall(request, null, null);
        Response response = call.execute();
        FilesList data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< FilesList >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Get all files and folders within a folder. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFilesListAsync(GetFilesListRequest request, final ApiCallback< FilesList > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFilesListValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFootnoteValidateBeforeCall(GetFootnoteRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Reads a footnote from the document node.
     * @param request Request object
     * @return FootnoteResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public FootnoteResponse getFootnote(GetFootnoteRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< FootnoteResponse > resp = getFootnoteWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< FootnoteResponse > resp = getFootnoteWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Reads a footnote from the document node.
     * @param request Request object
     * @return ApiResponse< FootnoteResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< FootnoteResponse > getFootnoteWithHttpInfo(GetFootnoteRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = getFootnoteValidateBeforeCall(request, null, null);
        Response response = call.execute();
        FootnoteResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< FootnoteResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Reads a footnote from the document node. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFootnoteAsync(GetFootnoteRequest request, final ApiCallback< FootnoteResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFootnoteValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFootnoteOnlineValidateBeforeCall(GetFootnoteOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Reads a footnote from the document node.
     * @param request Request object
     * @return FootnoteResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public FootnoteResponse getFootnoteOnline(GetFootnoteOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< FootnoteResponse > resp = getFootnoteOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< FootnoteResponse > resp = getFootnoteOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Reads a footnote from the document node.
     * @param request Request object
     * @return ApiResponse< FootnoteResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< FootnoteResponse > getFootnoteOnlineWithHttpInfo(GetFootnoteOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = getFootnoteOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        FootnoteResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< FootnoteResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Reads a footnote from the document node. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFootnoteOnlineAsync(GetFootnoteOnlineRequest request, final ApiCallback< FootnoteResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFootnoteOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFootnotesValidateBeforeCall(GetFootnotesRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Reads footnotes from the document node.
     * @param request Request object
     * @return FootnotesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public FootnotesResponse getFootnotes(GetFootnotesRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< FootnotesResponse > resp = getFootnotesWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< FootnotesResponse > resp = getFootnotesWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Reads footnotes from the document node.
     * @param request Request object
     * @return ApiResponse< FootnotesResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< FootnotesResponse > getFootnotesWithHttpInfo(GetFootnotesRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = getFootnotesValidateBeforeCall(request, null, null);
        Response response = call.execute();
        FootnotesResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< FootnotesResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Reads footnotes from the document node. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFootnotesAsync(GetFootnotesRequest request, final ApiCallback< FootnotesResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFootnotesValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFootnotesOnlineValidateBeforeCall(GetFootnotesOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Reads footnotes from the document node.
     * @param request Request object
     * @return FootnotesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public FootnotesResponse getFootnotesOnline(GetFootnotesOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< FootnotesResponse > resp = getFootnotesOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< FootnotesResponse > resp = getFootnotesOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Reads footnotes from the document node.
     * @param request Request object
     * @return ApiResponse< FootnotesResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< FootnotesResponse > getFootnotesOnlineWithHttpInfo(GetFootnotesOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = getFootnotesOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        FootnotesResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< FootnotesResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Reads footnotes from the document node. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFootnotesOnlineAsync(GetFootnotesOnlineRequest request, final ApiCallback< FootnotesResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFootnotesOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFormFieldValidateBeforeCall(GetFormFieldRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Reads a form field from the document node.
     * @param request Request object
     * @return FormFieldResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public FormFieldResponse getFormField(GetFormFieldRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< FormFieldResponse > resp = getFormFieldWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< FormFieldResponse > resp = getFormFieldWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Reads a form field from the document node.
     * @param request Request object
     * @return ApiResponse< FormFieldResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< FormFieldResponse > getFormFieldWithHttpInfo(GetFormFieldRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = getFormFieldValidateBeforeCall(request, null, null);
        Response response = call.execute();
        FormFieldResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< FormFieldResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Reads a form field from the document node. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFormFieldAsync(GetFormFieldRequest request, final ApiCallback< FormFieldResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFormFieldValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFormFieldOnlineValidateBeforeCall(GetFormFieldOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Reads a form field from the document node.
     * @param request Request object
     * @return FormFieldResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public FormFieldResponse getFormFieldOnline(GetFormFieldOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< FormFieldResponse > resp = getFormFieldOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< FormFieldResponse > resp = getFormFieldOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Reads a form field from the document node.
     * @param request Request object
     * @return ApiResponse< FormFieldResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< FormFieldResponse > getFormFieldOnlineWithHttpInfo(GetFormFieldOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = getFormFieldOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        FormFieldResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< FormFieldResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Reads a form field from the document node. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFormFieldOnlineAsync(GetFormFieldOnlineRequest request, final ApiCallback< FormFieldResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFormFieldOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFormFieldsValidateBeforeCall(GetFormFieldsRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Reads form fields from the document node.
     * @param request Request object
     * @return FormFieldsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public FormFieldsResponse getFormFields(GetFormFieldsRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< FormFieldsResponse > resp = getFormFieldsWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< FormFieldsResponse > resp = getFormFieldsWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Reads form fields from the document node.
     * @param request Request object
     * @return ApiResponse< FormFieldsResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< FormFieldsResponse > getFormFieldsWithHttpInfo(GetFormFieldsRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = getFormFieldsValidateBeforeCall(request, null, null);
        Response response = call.execute();
        FormFieldsResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< FormFieldsResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Reads form fields from the document node. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFormFieldsAsync(GetFormFieldsRequest request, final ApiCallback< FormFieldsResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFormFieldsValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFormFieldsOnlineValidateBeforeCall(GetFormFieldsOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Reads form fields from the document node.
     * @param request Request object
     * @return FormFieldsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public FormFieldsResponse getFormFieldsOnline(GetFormFieldsOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< FormFieldsResponse > resp = getFormFieldsOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< FormFieldsResponse > resp = getFormFieldsOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Reads form fields from the document node.
     * @param request Request object
     * @return ApiResponse< FormFieldsResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< FormFieldsResponse > getFormFieldsOnlineWithHttpInfo(GetFormFieldsOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = getFormFieldsOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        FormFieldsResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< FormFieldsResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Reads form fields from the document node. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFormFieldsOnlineAsync(GetFormFieldsOnlineRequest request, final ApiCallback< FormFieldsResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFormFieldsOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getHeaderFooterValidateBeforeCall(GetHeaderFooterRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Reads a HeaderFooter object from the document.
     * @param request Request object
     * @return HeaderFooterResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public HeaderFooterResponse getHeaderFooter(GetHeaderFooterRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< HeaderFooterResponse > resp = getHeaderFooterWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< HeaderFooterResponse > resp = getHeaderFooterWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Reads a HeaderFooter object from the document.
     * @param request Request object
     * @return ApiResponse< HeaderFooterResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< HeaderFooterResponse > getHeaderFooterWithHttpInfo(GetHeaderFooterRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = getHeaderFooterValidateBeforeCall(request, null, null);
        Response response = call.execute();
        HeaderFooterResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< HeaderFooterResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Reads a HeaderFooter object from the document. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getHeaderFooterAsync(GetHeaderFooterRequest request, final ApiCallback< HeaderFooterResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getHeaderFooterValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getHeaderFooterOfSectionValidateBeforeCall(GetHeaderFooterOfSectionRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Reads a HeaderFooter object from the document section.
     * @param request Request object
     * @return HeaderFooterResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public HeaderFooterResponse getHeaderFooterOfSection(GetHeaderFooterOfSectionRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< HeaderFooterResponse > resp = getHeaderFooterOfSectionWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< HeaderFooterResponse > resp = getHeaderFooterOfSectionWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Reads a HeaderFooter object from the document section.
     * @param request Request object
     * @return ApiResponse< HeaderFooterResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< HeaderFooterResponse > getHeaderFooterOfSectionWithHttpInfo(GetHeaderFooterOfSectionRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = getHeaderFooterOfSectionValidateBeforeCall(request, null, null);
        Response response = call.execute();
        HeaderFooterResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< HeaderFooterResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Reads a HeaderFooter object from the document section. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getHeaderFooterOfSectionAsync(GetHeaderFooterOfSectionRequest request, final ApiCallback< HeaderFooterResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getHeaderFooterOfSectionValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getHeaderFooterOfSectionOnlineValidateBeforeCall(GetHeaderFooterOfSectionOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Reads a HeaderFooter object from the document section.
     * @param request Request object
     * @return HeaderFooterResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public HeaderFooterResponse getHeaderFooterOfSectionOnline(GetHeaderFooterOfSectionOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< HeaderFooterResponse > resp = getHeaderFooterOfSectionOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< HeaderFooterResponse > resp = getHeaderFooterOfSectionOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Reads a HeaderFooter object from the document section.
     * @param request Request object
     * @return ApiResponse< HeaderFooterResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< HeaderFooterResponse > getHeaderFooterOfSectionOnlineWithHttpInfo(GetHeaderFooterOfSectionOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = getHeaderFooterOfSectionOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        HeaderFooterResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< HeaderFooterResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Reads a HeaderFooter object from the document section. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getHeaderFooterOfSectionOnlineAsync(GetHeaderFooterOfSectionOnlineRequest request, final ApiCallback< HeaderFooterResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getHeaderFooterOfSectionOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getHeaderFooterOnlineValidateBeforeCall(GetHeaderFooterOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Reads a HeaderFooter object from the document.
     * @param request Request object
     * @return HeaderFooterResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public HeaderFooterResponse getHeaderFooterOnline(GetHeaderFooterOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< HeaderFooterResponse > resp = getHeaderFooterOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< HeaderFooterResponse > resp = getHeaderFooterOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Reads a HeaderFooter object from the document.
     * @param request Request object
     * @return ApiResponse< HeaderFooterResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< HeaderFooterResponse > getHeaderFooterOnlineWithHttpInfo(GetHeaderFooterOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = getHeaderFooterOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        HeaderFooterResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< HeaderFooterResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Reads a HeaderFooter object from the document. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getHeaderFooterOnlineAsync(GetHeaderFooterOnlineRequest request, final ApiCallback< HeaderFooterResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getHeaderFooterOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getHeaderFootersValidateBeforeCall(GetHeaderFootersRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Reads HeaderFooter objects from the document section.
     * @param request Request object
     * @return HeaderFootersResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public HeaderFootersResponse getHeaderFooters(GetHeaderFootersRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< HeaderFootersResponse > resp = getHeaderFootersWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< HeaderFootersResponse > resp = getHeaderFootersWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Reads HeaderFooter objects from the document section.
     * @param request Request object
     * @return ApiResponse< HeaderFootersResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< HeaderFootersResponse > getHeaderFootersWithHttpInfo(GetHeaderFootersRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = getHeaderFootersValidateBeforeCall(request, null, null);
        Response response = call.execute();
        HeaderFootersResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< HeaderFootersResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Reads HeaderFooter objects from the document section. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getHeaderFootersAsync(GetHeaderFootersRequest request, final ApiCallback< HeaderFootersResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getHeaderFootersValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getHeaderFootersOnlineValidateBeforeCall(GetHeaderFootersOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Reads HeaderFooter objects from the document section.
     * @param request Request object
     * @return HeaderFootersResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public HeaderFootersResponse getHeaderFootersOnline(GetHeaderFootersOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< HeaderFootersResponse > resp = getHeaderFootersOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< HeaderFootersResponse > resp = getHeaderFootersOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Reads HeaderFooter objects from the document section.
     * @param request Request object
     * @return ApiResponse< HeaderFootersResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< HeaderFootersResponse > getHeaderFootersOnlineWithHttpInfo(GetHeaderFootersOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = getHeaderFootersOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        HeaderFootersResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< HeaderFootersResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Reads HeaderFooter objects from the document section. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getHeaderFootersOnlineAsync(GetHeaderFootersOnlineRequest request, final ApiCallback< HeaderFootersResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getHeaderFootersOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getListValidateBeforeCall(GetListRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Reads a list from the document.
     * @param request Request object
     * @return ListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public ListResponse getList(GetListRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< ListResponse > resp = getListWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< ListResponse > resp = getListWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Reads a list from the document.
     * @param request Request object
     * @return ApiResponse< ListResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< ListResponse > getListWithHttpInfo(GetListRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = getListValidateBeforeCall(request, null, null);
        Response response = call.execute();
        ListResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< ListResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Reads a list from the document. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getListAsync(GetListRequest request, final ApiCallback< ListResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getListValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getListOnlineValidateBeforeCall(GetListOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Reads a list from the document.
     * @param request Request object
     * @return ListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public ListResponse getListOnline(GetListOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< ListResponse > resp = getListOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< ListResponse > resp = getListOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Reads a list from the document.
     * @param request Request object
     * @return ApiResponse< ListResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< ListResponse > getListOnlineWithHttpInfo(GetListOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = getListOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        ListResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< ListResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Reads a list from the document. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getListOnlineAsync(GetListOnlineRequest request, final ApiCallback< ListResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getListOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getListsValidateBeforeCall(GetListsRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Reads lists from the document.
     * @param request Request object
     * @return ListsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public ListsResponse getLists(GetListsRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< ListsResponse > resp = getListsWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< ListsResponse > resp = getListsWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Reads lists from the document.
     * @param request Request object
     * @return ApiResponse< ListsResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< ListsResponse > getListsWithHttpInfo(GetListsRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = getListsValidateBeforeCall(request, null, null);
        Response response = call.execute();
        ListsResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< ListsResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Reads lists from the document. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getListsAsync(GetListsRequest request, final ApiCallback< ListsResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getListsValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getListsOnlineValidateBeforeCall(GetListsOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Reads lists from the document.
     * @param request Request object
     * @return ListsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public ListsResponse getListsOnline(GetListsOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< ListsResponse > resp = getListsOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< ListsResponse > resp = getListsOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Reads lists from the document.
     * @param request Request object
     * @return ApiResponse< ListsResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< ListsResponse > getListsOnlineWithHttpInfo(GetListsOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = getListsOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        ListsResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< ListsResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Reads lists from the document. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getListsOnlineAsync(GetListsOnlineRequest request, final ApiCallback< ListsResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getListsOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getOfficeMathObjectValidateBeforeCall(GetOfficeMathObjectRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Reads an OfficeMath object from the document node.
     * @param request Request object
     * @return OfficeMathObjectResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public OfficeMathObjectResponse getOfficeMathObject(GetOfficeMathObjectRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< OfficeMathObjectResponse > resp = getOfficeMathObjectWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< OfficeMathObjectResponse > resp = getOfficeMathObjectWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Reads an OfficeMath object from the document node.
     * @param request Request object
     * @return ApiResponse< OfficeMathObjectResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< OfficeMathObjectResponse > getOfficeMathObjectWithHttpInfo(GetOfficeMathObjectRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = getOfficeMathObjectValidateBeforeCall(request, null, null);
        Response response = call.execute();
        OfficeMathObjectResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< OfficeMathObjectResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Reads an OfficeMath object from the document node. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getOfficeMathObjectAsync(GetOfficeMathObjectRequest request, final ApiCallback< OfficeMathObjectResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getOfficeMathObjectValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getOfficeMathObjectOnlineValidateBeforeCall(GetOfficeMathObjectOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Reads an OfficeMath object from the document node.
     * @param request Request object
     * @return OfficeMathObjectResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public OfficeMathObjectResponse getOfficeMathObjectOnline(GetOfficeMathObjectOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< OfficeMathObjectResponse > resp = getOfficeMathObjectOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< OfficeMathObjectResponse > resp = getOfficeMathObjectOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Reads an OfficeMath object from the document node.
     * @param request Request object
     * @return ApiResponse< OfficeMathObjectResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< OfficeMathObjectResponse > getOfficeMathObjectOnlineWithHttpInfo(GetOfficeMathObjectOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = getOfficeMathObjectOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        OfficeMathObjectResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< OfficeMathObjectResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Reads an OfficeMath object from the document node. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getOfficeMathObjectOnlineAsync(GetOfficeMathObjectOnlineRequest request, final ApiCallback< OfficeMathObjectResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getOfficeMathObjectOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getOfficeMathObjectsValidateBeforeCall(GetOfficeMathObjectsRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Reads OfficeMath objects from the document node.
     * @param request Request object
     * @return OfficeMathObjectsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public OfficeMathObjectsResponse getOfficeMathObjects(GetOfficeMathObjectsRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< OfficeMathObjectsResponse > resp = getOfficeMathObjectsWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< OfficeMathObjectsResponse > resp = getOfficeMathObjectsWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Reads OfficeMath objects from the document node.
     * @param request Request object
     * @return ApiResponse< OfficeMathObjectsResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< OfficeMathObjectsResponse > getOfficeMathObjectsWithHttpInfo(GetOfficeMathObjectsRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = getOfficeMathObjectsValidateBeforeCall(request, null, null);
        Response response = call.execute();
        OfficeMathObjectsResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< OfficeMathObjectsResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Reads OfficeMath objects from the document node. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getOfficeMathObjectsAsync(GetOfficeMathObjectsRequest request, final ApiCallback< OfficeMathObjectsResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getOfficeMathObjectsValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getOfficeMathObjectsOnlineValidateBeforeCall(GetOfficeMathObjectsOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Reads OfficeMath objects from the document node.
     * @param request Request object
     * @return OfficeMathObjectsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public OfficeMathObjectsResponse getOfficeMathObjectsOnline(GetOfficeMathObjectsOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< OfficeMathObjectsResponse > resp = getOfficeMathObjectsOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< OfficeMathObjectsResponse > resp = getOfficeMathObjectsOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Reads OfficeMath objects from the document node.
     * @param request Request object
     * @return ApiResponse< OfficeMathObjectsResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< OfficeMathObjectsResponse > getOfficeMathObjectsOnlineWithHttpInfo(GetOfficeMathObjectsOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = getOfficeMathObjectsOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        OfficeMathObjectsResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< OfficeMathObjectsResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Reads OfficeMath objects from the document node. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getOfficeMathObjectsOnlineAsync(GetOfficeMathObjectsOnlineRequest request, final ApiCallback< OfficeMathObjectsResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getOfficeMathObjectsOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getParagraphValidateBeforeCall(GetParagraphRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Reads a paragraph from the document node.
     * @param request Request object
     * @return ParagraphResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public ParagraphResponse getParagraph(GetParagraphRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< ParagraphResponse > resp = getParagraphWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< ParagraphResponse > resp = getParagraphWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Reads a paragraph from the document node.
     * @param request Request object
     * @return ApiResponse< ParagraphResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< ParagraphResponse > getParagraphWithHttpInfo(GetParagraphRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = getParagraphValidateBeforeCall(request, null, null);
        Response response = call.execute();
        ParagraphResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< ParagraphResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Reads a paragraph from the document node. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getParagraphAsync(GetParagraphRequest request, final ApiCallback< ParagraphResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getParagraphValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getParagraphFormatValidateBeforeCall(GetParagraphFormatRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Reads the formatting properties of a paragraph from the document node.
     * @param request Request object
     * @return ParagraphFormatResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public ParagraphFormatResponse getParagraphFormat(GetParagraphFormatRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< ParagraphFormatResponse > resp = getParagraphFormatWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< ParagraphFormatResponse > resp = getParagraphFormatWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Reads the formatting properties of a paragraph from the document node.
     * @param request Request object
     * @return ApiResponse< ParagraphFormatResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< ParagraphFormatResponse > getParagraphFormatWithHttpInfo(GetParagraphFormatRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = getParagraphFormatValidateBeforeCall(request, null, null);
        Response response = call.execute();
        ParagraphFormatResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< ParagraphFormatResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Reads the formatting properties of a paragraph from the document node. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getParagraphFormatAsync(GetParagraphFormatRequest request, final ApiCallback< ParagraphFormatResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getParagraphFormatValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getParagraphFormatOnlineValidateBeforeCall(GetParagraphFormatOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Reads the formatting properties of a paragraph from the document node.
     * @param request Request object
     * @return ParagraphFormatResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public ParagraphFormatResponse getParagraphFormatOnline(GetParagraphFormatOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< ParagraphFormatResponse > resp = getParagraphFormatOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< ParagraphFormatResponse > resp = getParagraphFormatOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Reads the formatting properties of a paragraph from the document node.
     * @param request Request object
     * @return ApiResponse< ParagraphFormatResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< ParagraphFormatResponse > getParagraphFormatOnlineWithHttpInfo(GetParagraphFormatOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = getParagraphFormatOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        ParagraphFormatResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< ParagraphFormatResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Reads the formatting properties of a paragraph from the document node. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getParagraphFormatOnlineAsync(GetParagraphFormatOnlineRequest request, final ApiCallback< ParagraphFormatResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getParagraphFormatOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getParagraphListFormatValidateBeforeCall(GetParagraphListFormatRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Reads the formatting properties of a paragraph list from the document node.
     * @param request Request object
     * @return ParagraphListFormatResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public ParagraphListFormatResponse getParagraphListFormat(GetParagraphListFormatRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< ParagraphListFormatResponse > resp = getParagraphListFormatWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< ParagraphListFormatResponse > resp = getParagraphListFormatWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Reads the formatting properties of a paragraph list from the document node.
     * @param request Request object
     * @return ApiResponse< ParagraphListFormatResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< ParagraphListFormatResponse > getParagraphListFormatWithHttpInfo(GetParagraphListFormatRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = getParagraphListFormatValidateBeforeCall(request, null, null);
        Response response = call.execute();
        ParagraphListFormatResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< ParagraphListFormatResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Reads the formatting properties of a paragraph list from the document node. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getParagraphListFormatAsync(GetParagraphListFormatRequest request, final ApiCallback< ParagraphListFormatResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getParagraphListFormatValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getParagraphListFormatOnlineValidateBeforeCall(GetParagraphListFormatOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Reads the formatting properties of a paragraph list from the document node.
     * @param request Request object
     * @return ParagraphListFormatResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public ParagraphListFormatResponse getParagraphListFormatOnline(GetParagraphListFormatOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< ParagraphListFormatResponse > resp = getParagraphListFormatOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< ParagraphListFormatResponse > resp = getParagraphListFormatOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Reads the formatting properties of a paragraph list from the document node.
     * @param request Request object
     * @return ApiResponse< ParagraphListFormatResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< ParagraphListFormatResponse > getParagraphListFormatOnlineWithHttpInfo(GetParagraphListFormatOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = getParagraphListFormatOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        ParagraphListFormatResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< ParagraphListFormatResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Reads the formatting properties of a paragraph list from the document node. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getParagraphListFormatOnlineAsync(GetParagraphListFormatOnlineRequest request, final ApiCallback< ParagraphListFormatResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getParagraphListFormatOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getParagraphOnlineValidateBeforeCall(GetParagraphOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Reads a paragraph from the document node.
     * @param request Request object
     * @return ParagraphResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public ParagraphResponse getParagraphOnline(GetParagraphOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< ParagraphResponse > resp = getParagraphOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< ParagraphResponse > resp = getParagraphOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Reads a paragraph from the document node.
     * @param request Request object
     * @return ApiResponse< ParagraphResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< ParagraphResponse > getParagraphOnlineWithHttpInfo(GetParagraphOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = getParagraphOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        ParagraphResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< ParagraphResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Reads a paragraph from the document node. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getParagraphOnlineAsync(GetParagraphOnlineRequest request, final ApiCallback< ParagraphResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getParagraphOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getParagraphsValidateBeforeCall(GetParagraphsRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Reads paragraphs from the document node.
     * @param request Request object
     * @return ParagraphLinkCollectionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public ParagraphLinkCollectionResponse getParagraphs(GetParagraphsRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< ParagraphLinkCollectionResponse > resp = getParagraphsWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< ParagraphLinkCollectionResponse > resp = getParagraphsWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Reads paragraphs from the document node.
     * @param request Request object
     * @return ApiResponse< ParagraphLinkCollectionResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< ParagraphLinkCollectionResponse > getParagraphsWithHttpInfo(GetParagraphsRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = getParagraphsValidateBeforeCall(request, null, null);
        Response response = call.execute();
        ParagraphLinkCollectionResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< ParagraphLinkCollectionResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Reads paragraphs from the document node. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getParagraphsAsync(GetParagraphsRequest request, final ApiCallback< ParagraphLinkCollectionResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getParagraphsValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getParagraphsOnlineValidateBeforeCall(GetParagraphsOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Reads paragraphs from the document node.
     * @param request Request object
     * @return ParagraphLinkCollectionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public ParagraphLinkCollectionResponse getParagraphsOnline(GetParagraphsOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< ParagraphLinkCollectionResponse > resp = getParagraphsOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< ParagraphLinkCollectionResponse > resp = getParagraphsOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Reads paragraphs from the document node.
     * @param request Request object
     * @return ApiResponse< ParagraphLinkCollectionResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< ParagraphLinkCollectionResponse > getParagraphsOnlineWithHttpInfo(GetParagraphsOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = getParagraphsOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        ParagraphLinkCollectionResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< ParagraphLinkCollectionResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Reads paragraphs from the document node. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getParagraphsOnlineAsync(GetParagraphsOnlineRequest request, final ApiCallback< ParagraphLinkCollectionResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getParagraphsOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getParagraphTabStopsValidateBeforeCall(GetParagraphTabStopsRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Reads paragraph tab stops from the document node.
     * @param request Request object
     * @return TabStopsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public TabStopsResponse getParagraphTabStops(GetParagraphTabStopsRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< TabStopsResponse > resp = getParagraphTabStopsWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< TabStopsResponse > resp = getParagraphTabStopsWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Reads paragraph tab stops from the document node.
     * @param request Request object
     * @return ApiResponse< TabStopsResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< TabStopsResponse > getParagraphTabStopsWithHttpInfo(GetParagraphTabStopsRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = getParagraphTabStopsValidateBeforeCall(request, null, null);
        Response response = call.execute();
        TabStopsResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< TabStopsResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Reads paragraph tab stops from the document node. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getParagraphTabStopsAsync(GetParagraphTabStopsRequest request, final ApiCallback< TabStopsResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getParagraphTabStopsValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getParagraphTabStopsOnlineValidateBeforeCall(GetParagraphTabStopsOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Reads paragraph tab stops from the document node.
     * @param request Request object
     * @return TabStopsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public TabStopsResponse getParagraphTabStopsOnline(GetParagraphTabStopsOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< TabStopsResponse > resp = getParagraphTabStopsOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< TabStopsResponse > resp = getParagraphTabStopsOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Reads paragraph tab stops from the document node.
     * @param request Request object
     * @return ApiResponse< TabStopsResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< TabStopsResponse > getParagraphTabStopsOnlineWithHttpInfo(GetParagraphTabStopsOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = getParagraphTabStopsOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        TabStopsResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< TabStopsResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Reads paragraph tab stops from the document node. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getParagraphTabStopsOnlineAsync(GetParagraphTabStopsOnlineRequest request, final ApiCallback< TabStopsResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getParagraphTabStopsOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getRangeTextValidateBeforeCall(GetRangeTextRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Reads range text from the document.
     * @param request Request object
     * @return RangeTextResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public RangeTextResponse getRangeText(GetRangeTextRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< RangeTextResponse > resp = getRangeTextWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< RangeTextResponse > resp = getRangeTextWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Reads range text from the document.
     * @param request Request object
     * @return ApiResponse< RangeTextResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< RangeTextResponse > getRangeTextWithHttpInfo(GetRangeTextRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = getRangeTextValidateBeforeCall(request, null, null);
        Response response = call.execute();
        RangeTextResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< RangeTextResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Reads range text from the document. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getRangeTextAsync(GetRangeTextRequest request, final ApiCallback< RangeTextResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getRangeTextValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getRangeTextOnlineValidateBeforeCall(GetRangeTextOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Reads range text from the document.
     * @param request Request object
     * @return RangeTextResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public RangeTextResponse getRangeTextOnline(GetRangeTextOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< RangeTextResponse > resp = getRangeTextOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< RangeTextResponse > resp = getRangeTextOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Reads range text from the document.
     * @param request Request object
     * @return ApiResponse< RangeTextResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< RangeTextResponse > getRangeTextOnlineWithHttpInfo(GetRangeTextOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = getRangeTextOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        RangeTextResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< RangeTextResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Reads range text from the document. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getRangeTextOnlineAsync(GetRangeTextOnlineRequest request, final ApiCallback< RangeTextResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getRangeTextOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getRunValidateBeforeCall(GetRunRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Reads a Run object from the paragraph.
     * @param request Request object
     * @return RunResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public RunResponse getRun(GetRunRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< RunResponse > resp = getRunWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< RunResponse > resp = getRunWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Reads a Run object from the paragraph.
     * @param request Request object
     * @return ApiResponse< RunResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< RunResponse > getRunWithHttpInfo(GetRunRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = getRunValidateBeforeCall(request, null, null);
        Response response = call.execute();
        RunResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< RunResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Reads a Run object from the paragraph. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getRunAsync(GetRunRequest request, final ApiCallback< RunResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getRunValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getRunFontValidateBeforeCall(GetRunFontRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Reads the font properties of a Run object from the paragraph.
     * @param request Request object
     * @return FontResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public FontResponse getRunFont(GetRunFontRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< FontResponse > resp = getRunFontWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< FontResponse > resp = getRunFontWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Reads the font properties of a Run object from the paragraph.
     * @param request Request object
     * @return ApiResponse< FontResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< FontResponse > getRunFontWithHttpInfo(GetRunFontRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = getRunFontValidateBeforeCall(request, null, null);
        Response response = call.execute();
        FontResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< FontResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Reads the font properties of a Run object from the paragraph. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getRunFontAsync(GetRunFontRequest request, final ApiCallback< FontResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getRunFontValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getRunFontOnlineValidateBeforeCall(GetRunFontOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Reads the font properties of a Run object from the paragraph.
     * @param request Request object
     * @return FontResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public FontResponse getRunFontOnline(GetRunFontOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< FontResponse > resp = getRunFontOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< FontResponse > resp = getRunFontOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Reads the font properties of a Run object from the paragraph.
     * @param request Request object
     * @return ApiResponse< FontResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< FontResponse > getRunFontOnlineWithHttpInfo(GetRunFontOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = getRunFontOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        FontResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< FontResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Reads the font properties of a Run object from the paragraph. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getRunFontOnlineAsync(GetRunFontOnlineRequest request, final ApiCallback< FontResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getRunFontOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getRunOnlineValidateBeforeCall(GetRunOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Reads a Run object from the paragraph.
     * @param request Request object
     * @return RunResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public RunResponse getRunOnline(GetRunOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< RunResponse > resp = getRunOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< RunResponse > resp = getRunOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Reads a Run object from the paragraph.
     * @param request Request object
     * @return ApiResponse< RunResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< RunResponse > getRunOnlineWithHttpInfo(GetRunOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = getRunOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        RunResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< RunResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Reads a Run object from the paragraph. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getRunOnlineAsync(GetRunOnlineRequest request, final ApiCallback< RunResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getRunOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getRunsValidateBeforeCall(GetRunsRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Reads Run objects from the paragraph.
     * @param request Request object
     * @return RunsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public RunsResponse getRuns(GetRunsRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< RunsResponse > resp = getRunsWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< RunsResponse > resp = getRunsWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Reads Run objects from the paragraph.
     * @param request Request object
     * @return ApiResponse< RunsResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< RunsResponse > getRunsWithHttpInfo(GetRunsRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = getRunsValidateBeforeCall(request, null, null);
        Response response = call.execute();
        RunsResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< RunsResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Reads Run objects from the paragraph. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getRunsAsync(GetRunsRequest request, final ApiCallback< RunsResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getRunsValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getRunsOnlineValidateBeforeCall(GetRunsOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Reads Run objects from the paragraph.
     * @param request Request object
     * @return RunsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public RunsResponse getRunsOnline(GetRunsOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< RunsResponse > resp = getRunsOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< RunsResponse > resp = getRunsOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Reads Run objects from the paragraph.
     * @param request Request object
     * @return ApiResponse< RunsResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< RunsResponse > getRunsOnlineWithHttpInfo(GetRunsOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = getRunsOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        RunsResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< RunsResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Reads Run objects from the paragraph. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getRunsOnlineAsync(GetRunsOnlineRequest request, final ApiCallback< RunsResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getRunsOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSectionValidateBeforeCall(GetSectionRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Reads a section from the document.
     * @param request Request object
     * @return SectionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public SectionResponse getSection(GetSectionRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< SectionResponse > resp = getSectionWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< SectionResponse > resp = getSectionWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Reads a section from the document.
     * @param request Request object
     * @return ApiResponse< SectionResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< SectionResponse > getSectionWithHttpInfo(GetSectionRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = getSectionValidateBeforeCall(request, null, null);
        Response response = call.execute();
        SectionResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< SectionResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Reads a section from the document. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSectionAsync(GetSectionRequest request, final ApiCallback< SectionResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSectionValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSectionOnlineValidateBeforeCall(GetSectionOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Reads a section from the document.
     * @param request Request object
     * @return SectionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public SectionResponse getSectionOnline(GetSectionOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< SectionResponse > resp = getSectionOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< SectionResponse > resp = getSectionOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Reads a section from the document.
     * @param request Request object
     * @return ApiResponse< SectionResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< SectionResponse > getSectionOnlineWithHttpInfo(GetSectionOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = getSectionOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        SectionResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< SectionResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Reads a section from the document. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSectionOnlineAsync(GetSectionOnlineRequest request, final ApiCallback< SectionResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSectionOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSectionPageSetupValidateBeforeCall(GetSectionPageSetupRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Reads the page setup of a section from the document.
     * @param request Request object
     * @return SectionPageSetupResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public SectionPageSetupResponse getSectionPageSetup(GetSectionPageSetupRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< SectionPageSetupResponse > resp = getSectionPageSetupWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< SectionPageSetupResponse > resp = getSectionPageSetupWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Reads the page setup of a section from the document.
     * @param request Request object
     * @return ApiResponse< SectionPageSetupResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< SectionPageSetupResponse > getSectionPageSetupWithHttpInfo(GetSectionPageSetupRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = getSectionPageSetupValidateBeforeCall(request, null, null);
        Response response = call.execute();
        SectionPageSetupResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< SectionPageSetupResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Reads the page setup of a section from the document. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSectionPageSetupAsync(GetSectionPageSetupRequest request, final ApiCallback< SectionPageSetupResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSectionPageSetupValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSectionPageSetupOnlineValidateBeforeCall(GetSectionPageSetupOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Reads the page setup of a section from the document.
     * @param request Request object
     * @return SectionPageSetupResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public SectionPageSetupResponse getSectionPageSetupOnline(GetSectionPageSetupOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< SectionPageSetupResponse > resp = getSectionPageSetupOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< SectionPageSetupResponse > resp = getSectionPageSetupOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Reads the page setup of a section from the document.
     * @param request Request object
     * @return ApiResponse< SectionPageSetupResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< SectionPageSetupResponse > getSectionPageSetupOnlineWithHttpInfo(GetSectionPageSetupOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = getSectionPageSetupOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        SectionPageSetupResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< SectionPageSetupResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Reads the page setup of a section from the document. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSectionPageSetupOnlineAsync(GetSectionPageSetupOnlineRequest request, final ApiCallback< SectionPageSetupResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSectionPageSetupOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSectionsValidateBeforeCall(GetSectionsRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Reads sections from the document.
     * @param request Request object
     * @return SectionLinkCollectionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public SectionLinkCollectionResponse getSections(GetSectionsRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< SectionLinkCollectionResponse > resp = getSectionsWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< SectionLinkCollectionResponse > resp = getSectionsWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Reads sections from the document.
     * @param request Request object
     * @return ApiResponse< SectionLinkCollectionResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< SectionLinkCollectionResponse > getSectionsWithHttpInfo(GetSectionsRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = getSectionsValidateBeforeCall(request, null, null);
        Response response = call.execute();
        SectionLinkCollectionResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< SectionLinkCollectionResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Reads sections from the document. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSectionsAsync(GetSectionsRequest request, final ApiCallback< SectionLinkCollectionResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSectionsValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSectionsOnlineValidateBeforeCall(GetSectionsOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Reads sections from the document.
     * @param request Request object
     * @return SectionLinkCollectionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public SectionLinkCollectionResponse getSectionsOnline(GetSectionsOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< SectionLinkCollectionResponse > resp = getSectionsOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< SectionLinkCollectionResponse > resp = getSectionsOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Reads sections from the document.
     * @param request Request object
     * @return ApiResponse< SectionLinkCollectionResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< SectionLinkCollectionResponse > getSectionsOnlineWithHttpInfo(GetSectionsOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = getSectionsOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        SectionLinkCollectionResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< SectionLinkCollectionResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Reads sections from the document. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSectionsOnlineAsync(GetSectionsOnlineRequest request, final ApiCallback< SectionLinkCollectionResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSectionsOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getStyleValidateBeforeCall(GetStyleRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Reads a style from the document.
     * @param request Request object
     * @return StyleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public StyleResponse getStyle(GetStyleRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< StyleResponse > resp = getStyleWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< StyleResponse > resp = getStyleWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Reads a style from the document.
     * @param request Request object
     * @return ApiResponse< StyleResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< StyleResponse > getStyleWithHttpInfo(GetStyleRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = getStyleValidateBeforeCall(request, null, null);
        Response response = call.execute();
        StyleResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< StyleResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Reads a style from the document. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getStyleAsync(GetStyleRequest request, final ApiCallback< StyleResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getStyleValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getStyleFromDocumentElementValidateBeforeCall(GetStyleFromDocumentElementRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Reads a style from the document node.
     * @param request Request object
     * @return StyleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public StyleResponse getStyleFromDocumentElement(GetStyleFromDocumentElementRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< StyleResponse > resp = getStyleFromDocumentElementWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< StyleResponse > resp = getStyleFromDocumentElementWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Reads a style from the document node.
     * @param request Request object
     * @return ApiResponse< StyleResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< StyleResponse > getStyleFromDocumentElementWithHttpInfo(GetStyleFromDocumentElementRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = getStyleFromDocumentElementValidateBeforeCall(request, null, null);
        Response response = call.execute();
        StyleResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< StyleResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Reads a style from the document node. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getStyleFromDocumentElementAsync(GetStyleFromDocumentElementRequest request, final ApiCallback< StyleResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getStyleFromDocumentElementValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getStyleFromDocumentElementOnlineValidateBeforeCall(GetStyleFromDocumentElementOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Reads a style from the document node.
     * @param request Request object
     * @return StyleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public StyleResponse getStyleFromDocumentElementOnline(GetStyleFromDocumentElementOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< StyleResponse > resp = getStyleFromDocumentElementOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< StyleResponse > resp = getStyleFromDocumentElementOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Reads a style from the document node.
     * @param request Request object
     * @return ApiResponse< StyleResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< StyleResponse > getStyleFromDocumentElementOnlineWithHttpInfo(GetStyleFromDocumentElementOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = getStyleFromDocumentElementOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        StyleResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< StyleResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Reads a style from the document node. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getStyleFromDocumentElementOnlineAsync(GetStyleFromDocumentElementOnlineRequest request, final ApiCallback< StyleResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getStyleFromDocumentElementOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getStyleOnlineValidateBeforeCall(GetStyleOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Reads a style from the document.
     * @param request Request object
     * @return StyleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public StyleResponse getStyleOnline(GetStyleOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< StyleResponse > resp = getStyleOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< StyleResponse > resp = getStyleOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Reads a style from the document.
     * @param request Request object
     * @return ApiResponse< StyleResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< StyleResponse > getStyleOnlineWithHttpInfo(GetStyleOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = getStyleOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        StyleResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< StyleResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Reads a style from the document. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getStyleOnlineAsync(GetStyleOnlineRequest request, final ApiCallback< StyleResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getStyleOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getStylesValidateBeforeCall(GetStylesRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Reads styles from the document.
     * @param request Request object
     * @return StylesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public StylesResponse getStyles(GetStylesRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< StylesResponse > resp = getStylesWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< StylesResponse > resp = getStylesWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Reads styles from the document.
     * @param request Request object
     * @return ApiResponse< StylesResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< StylesResponse > getStylesWithHttpInfo(GetStylesRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = getStylesValidateBeforeCall(request, null, null);
        Response response = call.execute();
        StylesResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< StylesResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Reads styles from the document. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getStylesAsync(GetStylesRequest request, final ApiCallback< StylesResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getStylesValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getStylesOnlineValidateBeforeCall(GetStylesOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Reads styles from the document.
     * @param request Request object
     * @return StylesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public StylesResponse getStylesOnline(GetStylesOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< StylesResponse > resp = getStylesOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< StylesResponse > resp = getStylesOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Reads styles from the document.
     * @param request Request object
     * @return ApiResponse< StylesResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< StylesResponse > getStylesOnlineWithHttpInfo(GetStylesOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = getStylesOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        StylesResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< StylesResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Reads styles from the document. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getStylesOnlineAsync(GetStylesOnlineRequest request, final ApiCallback< StylesResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getStylesOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTableValidateBeforeCall(GetTableRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Reads a table from the document node.
     * @param request Request object
     * @return TableResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public TableResponse getTable(GetTableRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< TableResponse > resp = getTableWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< TableResponse > resp = getTableWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Reads a table from the document node.
     * @param request Request object
     * @return ApiResponse< TableResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< TableResponse > getTableWithHttpInfo(GetTableRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = getTableValidateBeforeCall(request, null, null);
        Response response = call.execute();
        TableResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< TableResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Reads a table from the document node. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTableAsync(GetTableRequest request, final ApiCallback< TableResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTableValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTableCellValidateBeforeCall(GetTableCellRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Reads a cell from the table row.
     * @param request Request object
     * @return TableCellResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public TableCellResponse getTableCell(GetTableCellRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< TableCellResponse > resp = getTableCellWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< TableCellResponse > resp = getTableCellWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Reads a cell from the table row.
     * @param request Request object
     * @return ApiResponse< TableCellResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< TableCellResponse > getTableCellWithHttpInfo(GetTableCellRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = getTableCellValidateBeforeCall(request, null, null);
        Response response = call.execute();
        TableCellResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< TableCellResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Reads a cell from the table row. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTableCellAsync(GetTableCellRequest request, final ApiCallback< TableCellResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTableCellValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTableCellFormatValidateBeforeCall(GetTableCellFormatRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Reads the formatting properties of a table cell.
     * @param request Request object
     * @return TableCellFormatResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public TableCellFormatResponse getTableCellFormat(GetTableCellFormatRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< TableCellFormatResponse > resp = getTableCellFormatWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< TableCellFormatResponse > resp = getTableCellFormatWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Reads the formatting properties of a table cell.
     * @param request Request object
     * @return ApiResponse< TableCellFormatResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< TableCellFormatResponse > getTableCellFormatWithHttpInfo(GetTableCellFormatRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = getTableCellFormatValidateBeforeCall(request, null, null);
        Response response = call.execute();
        TableCellFormatResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< TableCellFormatResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Reads the formatting properties of a table cell. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTableCellFormatAsync(GetTableCellFormatRequest request, final ApiCallback< TableCellFormatResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTableCellFormatValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTableCellFormatOnlineValidateBeforeCall(GetTableCellFormatOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Reads the formatting properties of a table cell.
     * @param request Request object
     * @return TableCellFormatResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public TableCellFormatResponse getTableCellFormatOnline(GetTableCellFormatOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< TableCellFormatResponse > resp = getTableCellFormatOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< TableCellFormatResponse > resp = getTableCellFormatOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Reads the formatting properties of a table cell.
     * @param request Request object
     * @return ApiResponse< TableCellFormatResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< TableCellFormatResponse > getTableCellFormatOnlineWithHttpInfo(GetTableCellFormatOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = getTableCellFormatOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        TableCellFormatResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< TableCellFormatResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Reads the formatting properties of a table cell. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTableCellFormatOnlineAsync(GetTableCellFormatOnlineRequest request, final ApiCallback< TableCellFormatResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTableCellFormatOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTableCellOnlineValidateBeforeCall(GetTableCellOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Reads a cell from the table row.
     * @param request Request object
     * @return TableCellResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public TableCellResponse getTableCellOnline(GetTableCellOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< TableCellResponse > resp = getTableCellOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< TableCellResponse > resp = getTableCellOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Reads a cell from the table row.
     * @param request Request object
     * @return ApiResponse< TableCellResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< TableCellResponse > getTableCellOnlineWithHttpInfo(GetTableCellOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = getTableCellOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        TableCellResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< TableCellResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Reads a cell from the table row. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTableCellOnlineAsync(GetTableCellOnlineRequest request, final ApiCallback< TableCellResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTableCellOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTableOnlineValidateBeforeCall(GetTableOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Reads a table from the document node.
     * @param request Request object
     * @return TableResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public TableResponse getTableOnline(GetTableOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< TableResponse > resp = getTableOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< TableResponse > resp = getTableOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Reads a table from the document node.
     * @param request Request object
     * @return ApiResponse< TableResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< TableResponse > getTableOnlineWithHttpInfo(GetTableOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = getTableOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        TableResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< TableResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Reads a table from the document node. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTableOnlineAsync(GetTableOnlineRequest request, final ApiCallback< TableResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTableOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTablePropertiesValidateBeforeCall(GetTablePropertiesRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Reads properties of a table from the document node.
     * @param request Request object
     * @return TablePropertiesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public TablePropertiesResponse getTableProperties(GetTablePropertiesRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< TablePropertiesResponse > resp = getTablePropertiesWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< TablePropertiesResponse > resp = getTablePropertiesWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Reads properties of a table from the document node.
     * @param request Request object
     * @return ApiResponse< TablePropertiesResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< TablePropertiesResponse > getTablePropertiesWithHttpInfo(GetTablePropertiesRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = getTablePropertiesValidateBeforeCall(request, null, null);
        Response response = call.execute();
        TablePropertiesResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< TablePropertiesResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Reads properties of a table from the document node. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTablePropertiesAsync(GetTablePropertiesRequest request, final ApiCallback< TablePropertiesResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTablePropertiesValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTablePropertiesOnlineValidateBeforeCall(GetTablePropertiesOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Reads properties of a table from the document node.
     * @param request Request object
     * @return TablePropertiesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public TablePropertiesResponse getTablePropertiesOnline(GetTablePropertiesOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< TablePropertiesResponse > resp = getTablePropertiesOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< TablePropertiesResponse > resp = getTablePropertiesOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Reads properties of a table from the document node.
     * @param request Request object
     * @return ApiResponse< TablePropertiesResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< TablePropertiesResponse > getTablePropertiesOnlineWithHttpInfo(GetTablePropertiesOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = getTablePropertiesOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        TablePropertiesResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< TablePropertiesResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Reads properties of a table from the document node. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTablePropertiesOnlineAsync(GetTablePropertiesOnlineRequest request, final ApiCallback< TablePropertiesResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTablePropertiesOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTableRowValidateBeforeCall(GetTableRowRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Reads a row from the table.
     * @param request Request object
     * @return TableRowResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public TableRowResponse getTableRow(GetTableRowRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< TableRowResponse > resp = getTableRowWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< TableRowResponse > resp = getTableRowWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Reads a row from the table.
     * @param request Request object
     * @return ApiResponse< TableRowResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< TableRowResponse > getTableRowWithHttpInfo(GetTableRowRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = getTableRowValidateBeforeCall(request, null, null);
        Response response = call.execute();
        TableRowResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< TableRowResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Reads a row from the table. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTableRowAsync(GetTableRowRequest request, final ApiCallback< TableRowResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTableRowValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTableRowFormatValidateBeforeCall(GetTableRowFormatRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Reads the formatting properties of a table row.
     * @param request Request object
     * @return TableRowFormatResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public TableRowFormatResponse getTableRowFormat(GetTableRowFormatRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< TableRowFormatResponse > resp = getTableRowFormatWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< TableRowFormatResponse > resp = getTableRowFormatWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Reads the formatting properties of a table row.
     * @param request Request object
     * @return ApiResponse< TableRowFormatResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< TableRowFormatResponse > getTableRowFormatWithHttpInfo(GetTableRowFormatRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = getTableRowFormatValidateBeforeCall(request, null, null);
        Response response = call.execute();
        TableRowFormatResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< TableRowFormatResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Reads the formatting properties of a table row. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTableRowFormatAsync(GetTableRowFormatRequest request, final ApiCallback< TableRowFormatResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTableRowFormatValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTableRowFormatOnlineValidateBeforeCall(GetTableRowFormatOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Reads the formatting properties of a table row.
     * @param request Request object
     * @return TableRowFormatResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public TableRowFormatResponse getTableRowFormatOnline(GetTableRowFormatOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< TableRowFormatResponse > resp = getTableRowFormatOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< TableRowFormatResponse > resp = getTableRowFormatOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Reads the formatting properties of a table row.
     * @param request Request object
     * @return ApiResponse< TableRowFormatResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< TableRowFormatResponse > getTableRowFormatOnlineWithHttpInfo(GetTableRowFormatOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = getTableRowFormatOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        TableRowFormatResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< TableRowFormatResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Reads the formatting properties of a table row. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTableRowFormatOnlineAsync(GetTableRowFormatOnlineRequest request, final ApiCallback< TableRowFormatResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTableRowFormatOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTableRowOnlineValidateBeforeCall(GetTableRowOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Reads a row from the table.
     * @param request Request object
     * @return TableRowResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public TableRowResponse getTableRowOnline(GetTableRowOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< TableRowResponse > resp = getTableRowOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< TableRowResponse > resp = getTableRowOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Reads a row from the table.
     * @param request Request object
     * @return ApiResponse< TableRowResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< TableRowResponse > getTableRowOnlineWithHttpInfo(GetTableRowOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = getTableRowOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        TableRowResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< TableRowResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Reads a row from the table. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTableRowOnlineAsync(GetTableRowOnlineRequest request, final ApiCallback< TableRowResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTableRowOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTablesValidateBeforeCall(GetTablesRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Reads tables from the document node.
     * @param request Request object
     * @return TableLinkCollectionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public TableLinkCollectionResponse getTables(GetTablesRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< TableLinkCollectionResponse > resp = getTablesWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< TableLinkCollectionResponse > resp = getTablesWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Reads tables from the document node.
     * @param request Request object
     * @return ApiResponse< TableLinkCollectionResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< TableLinkCollectionResponse > getTablesWithHttpInfo(GetTablesRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = getTablesValidateBeforeCall(request, null, null);
        Response response = call.execute();
        TableLinkCollectionResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< TableLinkCollectionResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Reads tables from the document node. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTablesAsync(GetTablesRequest request, final ApiCallback< TableLinkCollectionResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTablesValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTablesOnlineValidateBeforeCall(GetTablesOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Reads tables from the document node.
     * @param request Request object
     * @return TableLinkCollectionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public TableLinkCollectionResponse getTablesOnline(GetTablesOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< TableLinkCollectionResponse > resp = getTablesOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< TableLinkCollectionResponse > resp = getTablesOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Reads tables from the document node.
     * @param request Request object
     * @return ApiResponse< TableLinkCollectionResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< TableLinkCollectionResponse > getTablesOnlineWithHttpInfo(GetTablesOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = getTablesOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        TableLinkCollectionResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< TableLinkCollectionResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Reads tables from the document node. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTablesOnlineAsync(GetTablesOnlineRequest request, final ApiCallback< TableLinkCollectionResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTablesOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call insertCommentValidateBeforeCall(InsertCommentRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Inserts a new comment to the document.
     * @param request Request object
     * @return CommentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public CommentResponse insertComment(InsertCommentRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< CommentResponse > resp = insertCommentWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< CommentResponse > resp = insertCommentWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Inserts a new comment to the document.
     * @param request Request object
     * @return ApiResponse< CommentResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< CommentResponse > insertCommentWithHttpInfo(InsertCommentRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = insertCommentValidateBeforeCall(request, null, null);
        Response response = call.execute();
        CommentResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< CommentResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Inserts a new comment to the document. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call insertCommentAsync(InsertCommentRequest request, final ApiCallback< CommentResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = insertCommentValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call insertCommentOnlineValidateBeforeCall(InsertCommentOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Inserts a new comment to the document.
     * @param request Request object
     * @return InsertCommentOnlineResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public InsertCommentOnlineResponse insertCommentOnline(InsertCommentOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< InsertCommentOnlineResponse > resp = insertCommentOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< InsertCommentOnlineResponse > resp = insertCommentOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Inserts a new comment to the document.
     * @param request Request object
     * @return ApiResponse< InsertCommentOnlineResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< InsertCommentOnlineResponse > insertCommentOnlineWithHttpInfo(InsertCommentOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = insertCommentOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        InsertCommentOnlineResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< InsertCommentOnlineResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Inserts a new comment to the document. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call insertCommentOnlineAsync(InsertCommentOnlineRequest request, final ApiCallback< InsertCommentOnlineResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = insertCommentOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call insertDrawingObjectValidateBeforeCall(InsertDrawingObjectRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Inserts a new DrawingObject to the document node.
     * @param request Request object
     * @return DrawingObjectResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public DrawingObjectResponse insertDrawingObject(InsertDrawingObjectRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< DrawingObjectResponse > resp = insertDrawingObjectWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< DrawingObjectResponse > resp = insertDrawingObjectWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Inserts a new DrawingObject to the document node.
     * @param request Request object
     * @return ApiResponse< DrawingObjectResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< DrawingObjectResponse > insertDrawingObjectWithHttpInfo(InsertDrawingObjectRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = insertDrawingObjectValidateBeforeCall(request, null, null);
        Response response = call.execute();
        DrawingObjectResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< DrawingObjectResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Inserts a new DrawingObject to the document node. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call insertDrawingObjectAsync(InsertDrawingObjectRequest request, final ApiCallback< DrawingObjectResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = insertDrawingObjectValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call insertDrawingObjectOnlineValidateBeforeCall(InsertDrawingObjectOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Inserts a new DrawingObject to the document node.
     * @param request Request object
     * @return InsertDrawingObjectOnlineResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public InsertDrawingObjectOnlineResponse insertDrawingObjectOnline(InsertDrawingObjectOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< InsertDrawingObjectOnlineResponse > resp = insertDrawingObjectOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< InsertDrawingObjectOnlineResponse > resp = insertDrawingObjectOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Inserts a new DrawingObject to the document node.
     * @param request Request object
     * @return ApiResponse< InsertDrawingObjectOnlineResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< InsertDrawingObjectOnlineResponse > insertDrawingObjectOnlineWithHttpInfo(InsertDrawingObjectOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = insertDrawingObjectOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        InsertDrawingObjectOnlineResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< InsertDrawingObjectOnlineResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Inserts a new DrawingObject to the document node. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call insertDrawingObjectOnlineAsync(InsertDrawingObjectOnlineRequest request, final ApiCallback< InsertDrawingObjectOnlineResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = insertDrawingObjectOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call insertFieldValidateBeforeCall(InsertFieldRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Inserts a new field to the document node.
     * @param request Request object
     * @return FieldResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public FieldResponse insertField(InsertFieldRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< FieldResponse > resp = insertFieldWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< FieldResponse > resp = insertFieldWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Inserts a new field to the document node.
     * @param request Request object
     * @return ApiResponse< FieldResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< FieldResponse > insertFieldWithHttpInfo(InsertFieldRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = insertFieldValidateBeforeCall(request, null, null);
        Response response = call.execute();
        FieldResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< FieldResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Inserts a new field to the document node. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call insertFieldAsync(InsertFieldRequest request, final ApiCallback< FieldResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = insertFieldValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call insertFieldOnlineValidateBeforeCall(InsertFieldOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Inserts a new field to the document node.
     * @param request Request object
     * @return InsertFieldOnlineResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public InsertFieldOnlineResponse insertFieldOnline(InsertFieldOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< InsertFieldOnlineResponse > resp = insertFieldOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< InsertFieldOnlineResponse > resp = insertFieldOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Inserts a new field to the document node.
     * @param request Request object
     * @return ApiResponse< InsertFieldOnlineResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< InsertFieldOnlineResponse > insertFieldOnlineWithHttpInfo(InsertFieldOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = insertFieldOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        InsertFieldOnlineResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< InsertFieldOnlineResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Inserts a new field to the document node. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call insertFieldOnlineAsync(InsertFieldOnlineRequest request, final ApiCallback< InsertFieldOnlineResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = insertFieldOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call insertFootnoteValidateBeforeCall(InsertFootnoteRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Inserts a new footnote to the document node.
     * @param request Request object
     * @return FootnoteResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public FootnoteResponse insertFootnote(InsertFootnoteRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< FootnoteResponse > resp = insertFootnoteWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< FootnoteResponse > resp = insertFootnoteWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Inserts a new footnote to the document node.
     * @param request Request object
     * @return ApiResponse< FootnoteResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< FootnoteResponse > insertFootnoteWithHttpInfo(InsertFootnoteRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = insertFootnoteValidateBeforeCall(request, null, null);
        Response response = call.execute();
        FootnoteResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< FootnoteResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Inserts a new footnote to the document node. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call insertFootnoteAsync(InsertFootnoteRequest request, final ApiCallback< FootnoteResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = insertFootnoteValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call insertFootnoteOnlineValidateBeforeCall(InsertFootnoteOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Inserts a new footnote to the document node.
     * @param request Request object
     * @return InsertFootnoteOnlineResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public InsertFootnoteOnlineResponse insertFootnoteOnline(InsertFootnoteOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< InsertFootnoteOnlineResponse > resp = insertFootnoteOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< InsertFootnoteOnlineResponse > resp = insertFootnoteOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Inserts a new footnote to the document node.
     * @param request Request object
     * @return ApiResponse< InsertFootnoteOnlineResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< InsertFootnoteOnlineResponse > insertFootnoteOnlineWithHttpInfo(InsertFootnoteOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = insertFootnoteOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        InsertFootnoteOnlineResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< InsertFootnoteOnlineResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Inserts a new footnote to the document node. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call insertFootnoteOnlineAsync(InsertFootnoteOnlineRequest request, final ApiCallback< InsertFootnoteOnlineResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = insertFootnoteOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call insertFormFieldValidateBeforeCall(InsertFormFieldRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Inserts a new form field to the document node.
     * @param request Request object
     * @return FormFieldResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public FormFieldResponse insertFormField(InsertFormFieldRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< FormFieldResponse > resp = insertFormFieldWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< FormFieldResponse > resp = insertFormFieldWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Inserts a new form field to the document node.
     * @param request Request object
     * @return ApiResponse< FormFieldResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< FormFieldResponse > insertFormFieldWithHttpInfo(InsertFormFieldRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = insertFormFieldValidateBeforeCall(request, null, null);
        Response response = call.execute();
        FormFieldResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< FormFieldResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Inserts a new form field to the document node. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call insertFormFieldAsync(InsertFormFieldRequest request, final ApiCallback< FormFieldResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = insertFormFieldValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call insertFormFieldOnlineValidateBeforeCall(InsertFormFieldOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Inserts a new form field to the document node.
     * @param request Request object
     * @return InsertFormFieldOnlineResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public InsertFormFieldOnlineResponse insertFormFieldOnline(InsertFormFieldOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< InsertFormFieldOnlineResponse > resp = insertFormFieldOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< InsertFormFieldOnlineResponse > resp = insertFormFieldOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Inserts a new form field to the document node.
     * @param request Request object
     * @return ApiResponse< InsertFormFieldOnlineResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< InsertFormFieldOnlineResponse > insertFormFieldOnlineWithHttpInfo(InsertFormFieldOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = insertFormFieldOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        InsertFormFieldOnlineResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< InsertFormFieldOnlineResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Inserts a new form field to the document node. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call insertFormFieldOnlineAsync(InsertFormFieldOnlineRequest request, final ApiCallback< InsertFormFieldOnlineResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = insertFormFieldOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call insertHeaderFooterValidateBeforeCall(InsertHeaderFooterRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Inserts a new HeaderFooter object to the document section.
     * @param request Request object
     * @return HeaderFooterResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public HeaderFooterResponse insertHeaderFooter(InsertHeaderFooterRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< HeaderFooterResponse > resp = insertHeaderFooterWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< HeaderFooterResponse > resp = insertHeaderFooterWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Inserts a new HeaderFooter object to the document section.
     * @param request Request object
     * @return ApiResponse< HeaderFooterResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< HeaderFooterResponse > insertHeaderFooterWithHttpInfo(InsertHeaderFooterRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = insertHeaderFooterValidateBeforeCall(request, null, null);
        Response response = call.execute();
        HeaderFooterResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< HeaderFooterResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Inserts a new HeaderFooter object to the document section. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call insertHeaderFooterAsync(InsertHeaderFooterRequest request, final ApiCallback< HeaderFooterResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = insertHeaderFooterValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call insertHeaderFooterOnlineValidateBeforeCall(InsertHeaderFooterOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Inserts a new HeaderFooter object to the document section.
     * @param request Request object
     * @return InsertHeaderFooterOnlineResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public InsertHeaderFooterOnlineResponse insertHeaderFooterOnline(InsertHeaderFooterOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< InsertHeaderFooterOnlineResponse > resp = insertHeaderFooterOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< InsertHeaderFooterOnlineResponse > resp = insertHeaderFooterOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Inserts a new HeaderFooter object to the document section.
     * @param request Request object
     * @return ApiResponse< InsertHeaderFooterOnlineResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< InsertHeaderFooterOnlineResponse > insertHeaderFooterOnlineWithHttpInfo(InsertHeaderFooterOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = insertHeaderFooterOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        InsertHeaderFooterOnlineResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< InsertHeaderFooterOnlineResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Inserts a new HeaderFooter object to the document section. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call insertHeaderFooterOnlineAsync(InsertHeaderFooterOnlineRequest request, final ApiCallback< InsertHeaderFooterOnlineResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = insertHeaderFooterOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call insertListValidateBeforeCall(InsertListRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Inserts a new list to the document.
     * @param request Request object
     * @return ListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public ListResponse insertList(InsertListRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< ListResponse > resp = insertListWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< ListResponse > resp = insertListWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Inserts a new list to the document.
     * @param request Request object
     * @return ApiResponse< ListResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< ListResponse > insertListWithHttpInfo(InsertListRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = insertListValidateBeforeCall(request, null, null);
        Response response = call.execute();
        ListResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< ListResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Inserts a new list to the document. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call insertListAsync(InsertListRequest request, final ApiCallback< ListResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = insertListValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call insertListOnlineValidateBeforeCall(InsertListOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Inserts a new list to the document.
     * @param request Request object
     * @return InsertListOnlineResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public InsertListOnlineResponse insertListOnline(InsertListOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< InsertListOnlineResponse > resp = insertListOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< InsertListOnlineResponse > resp = insertListOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Inserts a new list to the document.
     * @param request Request object
     * @return ApiResponse< InsertListOnlineResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< InsertListOnlineResponse > insertListOnlineWithHttpInfo(InsertListOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = insertListOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        InsertListOnlineResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< InsertListOnlineResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Inserts a new list to the document. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call insertListOnlineAsync(InsertListOnlineRequest request, final ApiCallback< InsertListOnlineResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = insertListOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call insertOrUpdateParagraphTabStopValidateBeforeCall(InsertOrUpdateParagraphTabStopRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Inserts a new or updates an existing paragraph tab stop in the document node.
     * @param request Request object
     * @return TabStopsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public TabStopsResponse insertOrUpdateParagraphTabStop(InsertOrUpdateParagraphTabStopRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< TabStopsResponse > resp = insertOrUpdateParagraphTabStopWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< TabStopsResponse > resp = insertOrUpdateParagraphTabStopWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Inserts a new or updates an existing paragraph tab stop in the document node.
     * @param request Request object
     * @return ApiResponse< TabStopsResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< TabStopsResponse > insertOrUpdateParagraphTabStopWithHttpInfo(InsertOrUpdateParagraphTabStopRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = insertOrUpdateParagraphTabStopValidateBeforeCall(request, null, null);
        Response response = call.execute();
        TabStopsResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< TabStopsResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Inserts a new or updates an existing paragraph tab stop in the document node. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call insertOrUpdateParagraphTabStopAsync(InsertOrUpdateParagraphTabStopRequest request, final ApiCallback< TabStopsResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = insertOrUpdateParagraphTabStopValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call insertOrUpdateParagraphTabStopOnlineValidateBeforeCall(InsertOrUpdateParagraphTabStopOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Inserts a new or updates an existing paragraph tab stop in the document node.
     * @param request Request object
     * @return InsertOrUpdateParagraphTabStopOnlineResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public InsertOrUpdateParagraphTabStopOnlineResponse insertOrUpdateParagraphTabStopOnline(InsertOrUpdateParagraphTabStopOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< InsertOrUpdateParagraphTabStopOnlineResponse > resp = insertOrUpdateParagraphTabStopOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< InsertOrUpdateParagraphTabStopOnlineResponse > resp = insertOrUpdateParagraphTabStopOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Inserts a new or updates an existing paragraph tab stop in the document node.
     * @param request Request object
     * @return ApiResponse< InsertOrUpdateParagraphTabStopOnlineResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< InsertOrUpdateParagraphTabStopOnlineResponse > insertOrUpdateParagraphTabStopOnlineWithHttpInfo(InsertOrUpdateParagraphTabStopOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = insertOrUpdateParagraphTabStopOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        InsertOrUpdateParagraphTabStopOnlineResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< InsertOrUpdateParagraphTabStopOnlineResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Inserts a new or updates an existing paragraph tab stop in the document node. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call insertOrUpdateParagraphTabStopOnlineAsync(InsertOrUpdateParagraphTabStopOnlineRequest request, final ApiCallback< InsertOrUpdateParagraphTabStopOnlineResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = insertOrUpdateParagraphTabStopOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call insertPageNumbersValidateBeforeCall(InsertPageNumbersRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Inserts page numbers to the document.
     * @param request Request object
     * @return DocumentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public DocumentResponse insertPageNumbers(InsertPageNumbersRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< DocumentResponse > resp = insertPageNumbersWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< DocumentResponse > resp = insertPageNumbersWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Inserts page numbers to the document.
     * @param request Request object
     * @return ApiResponse< DocumentResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< DocumentResponse > insertPageNumbersWithHttpInfo(InsertPageNumbersRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = insertPageNumbersValidateBeforeCall(request, null, null);
        Response response = call.execute();
        DocumentResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< DocumentResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Inserts page numbers to the document. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call insertPageNumbersAsync(InsertPageNumbersRequest request, final ApiCallback< DocumentResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = insertPageNumbersValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call insertPageNumbersOnlineValidateBeforeCall(InsertPageNumbersOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Inserts page numbers to the document.
     * @param request Request object
     * @return InsertPageNumbersOnlineResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public InsertPageNumbersOnlineResponse insertPageNumbersOnline(InsertPageNumbersOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< InsertPageNumbersOnlineResponse > resp = insertPageNumbersOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< InsertPageNumbersOnlineResponse > resp = insertPageNumbersOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Inserts page numbers to the document.
     * @param request Request object
     * @return ApiResponse< InsertPageNumbersOnlineResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< InsertPageNumbersOnlineResponse > insertPageNumbersOnlineWithHttpInfo(InsertPageNumbersOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = insertPageNumbersOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        InsertPageNumbersOnlineResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< InsertPageNumbersOnlineResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Inserts page numbers to the document. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call insertPageNumbersOnlineAsync(InsertPageNumbersOnlineRequest request, final ApiCallback< InsertPageNumbersOnlineResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = insertPageNumbersOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call insertParagraphValidateBeforeCall(InsertParagraphRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Inserts a new paragraph to the document node.
     * @param request Request object
     * @return ParagraphResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public ParagraphResponse insertParagraph(InsertParagraphRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< ParagraphResponse > resp = insertParagraphWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< ParagraphResponse > resp = insertParagraphWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Inserts a new paragraph to the document node.
     * @param request Request object
     * @return ApiResponse< ParagraphResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< ParagraphResponse > insertParagraphWithHttpInfo(InsertParagraphRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = insertParagraphValidateBeforeCall(request, null, null);
        Response response = call.execute();
        ParagraphResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< ParagraphResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Inserts a new paragraph to the document node. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call insertParagraphAsync(InsertParagraphRequest request, final ApiCallback< ParagraphResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = insertParagraphValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call insertParagraphOnlineValidateBeforeCall(InsertParagraphOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Inserts a new paragraph to the document node.
     * @param request Request object
     * @return InsertParagraphOnlineResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public InsertParagraphOnlineResponse insertParagraphOnline(InsertParagraphOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< InsertParagraphOnlineResponse > resp = insertParagraphOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< InsertParagraphOnlineResponse > resp = insertParagraphOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Inserts a new paragraph to the document node.
     * @param request Request object
     * @return ApiResponse< InsertParagraphOnlineResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< InsertParagraphOnlineResponse > insertParagraphOnlineWithHttpInfo(InsertParagraphOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = insertParagraphOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        InsertParagraphOnlineResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< InsertParagraphOnlineResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Inserts a new paragraph to the document node. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call insertParagraphOnlineAsync(InsertParagraphOnlineRequest request, final ApiCallback< InsertParagraphOnlineResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = insertParagraphOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call insertRunValidateBeforeCall(InsertRunRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Inserts a new Run object to the paragraph.
     * @param request Request object
     * @return RunResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public RunResponse insertRun(InsertRunRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< RunResponse > resp = insertRunWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< RunResponse > resp = insertRunWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Inserts a new Run object to the paragraph.
     * @param request Request object
     * @return ApiResponse< RunResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< RunResponse > insertRunWithHttpInfo(InsertRunRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = insertRunValidateBeforeCall(request, null, null);
        Response response = call.execute();
        RunResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< RunResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Inserts a new Run object to the paragraph. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call insertRunAsync(InsertRunRequest request, final ApiCallback< RunResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = insertRunValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call insertRunOnlineValidateBeforeCall(InsertRunOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Inserts a new Run object to the paragraph.
     * @param request Request object
     * @return InsertRunOnlineResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public InsertRunOnlineResponse insertRunOnline(InsertRunOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< InsertRunOnlineResponse > resp = insertRunOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< InsertRunOnlineResponse > resp = insertRunOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Inserts a new Run object to the paragraph.
     * @param request Request object
     * @return ApiResponse< InsertRunOnlineResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< InsertRunOnlineResponse > insertRunOnlineWithHttpInfo(InsertRunOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = insertRunOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        InsertRunOnlineResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< InsertRunOnlineResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Inserts a new Run object to the paragraph. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call insertRunOnlineAsync(InsertRunOnlineRequest request, final ApiCallback< InsertRunOnlineResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = insertRunOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call insertStyleValidateBeforeCall(InsertStyleRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Inserts a new style to the document.
     * @param request Request object
     * @return StyleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public StyleResponse insertStyle(InsertStyleRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< StyleResponse > resp = insertStyleWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< StyleResponse > resp = insertStyleWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Inserts a new style to the document.
     * @param request Request object
     * @return ApiResponse< StyleResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< StyleResponse > insertStyleWithHttpInfo(InsertStyleRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = insertStyleValidateBeforeCall(request, null, null);
        Response response = call.execute();
        StyleResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< StyleResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Inserts a new style to the document. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call insertStyleAsync(InsertStyleRequest request, final ApiCallback< StyleResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = insertStyleValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call insertStyleOnlineValidateBeforeCall(InsertStyleOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Inserts a new style to the document.
     * @param request Request object
     * @return InsertStyleOnlineResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public InsertStyleOnlineResponse insertStyleOnline(InsertStyleOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< InsertStyleOnlineResponse > resp = insertStyleOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< InsertStyleOnlineResponse > resp = insertStyleOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Inserts a new style to the document.
     * @param request Request object
     * @return ApiResponse< InsertStyleOnlineResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< InsertStyleOnlineResponse > insertStyleOnlineWithHttpInfo(InsertStyleOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = insertStyleOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        InsertStyleOnlineResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< InsertStyleOnlineResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Inserts a new style to the document. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call insertStyleOnlineAsync(InsertStyleOnlineRequest request, final ApiCallback< InsertStyleOnlineResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = insertStyleOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call insertTableValidateBeforeCall(InsertTableRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Inserts a new table to the document node.
     * @param request Request object
     * @return TableResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public TableResponse insertTable(InsertTableRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< TableResponse > resp = insertTableWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< TableResponse > resp = insertTableWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Inserts a new table to the document node.
     * @param request Request object
     * @return ApiResponse< TableResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< TableResponse > insertTableWithHttpInfo(InsertTableRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = insertTableValidateBeforeCall(request, null, null);
        Response response = call.execute();
        TableResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< TableResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Inserts a new table to the document node. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call insertTableAsync(InsertTableRequest request, final ApiCallback< TableResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = insertTableValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call insertTableCellValidateBeforeCall(InsertTableCellRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Inserts a new cell to the table row.
     * @param request Request object
     * @return TableCellResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public TableCellResponse insertTableCell(InsertTableCellRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< TableCellResponse > resp = insertTableCellWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< TableCellResponse > resp = insertTableCellWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Inserts a new cell to the table row.
     * @param request Request object
     * @return ApiResponse< TableCellResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< TableCellResponse > insertTableCellWithHttpInfo(InsertTableCellRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = insertTableCellValidateBeforeCall(request, null, null);
        Response response = call.execute();
        TableCellResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< TableCellResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Inserts a new cell to the table row. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call insertTableCellAsync(InsertTableCellRequest request, final ApiCallback< TableCellResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = insertTableCellValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call insertTableCellOnlineValidateBeforeCall(InsertTableCellOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Inserts a new cell to the table row.
     * @param request Request object
     * @return InsertTableCellOnlineResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public InsertTableCellOnlineResponse insertTableCellOnline(InsertTableCellOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< InsertTableCellOnlineResponse > resp = insertTableCellOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< InsertTableCellOnlineResponse > resp = insertTableCellOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Inserts a new cell to the table row.
     * @param request Request object
     * @return ApiResponse< InsertTableCellOnlineResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< InsertTableCellOnlineResponse > insertTableCellOnlineWithHttpInfo(InsertTableCellOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = insertTableCellOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        InsertTableCellOnlineResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< InsertTableCellOnlineResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Inserts a new cell to the table row. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call insertTableCellOnlineAsync(InsertTableCellOnlineRequest request, final ApiCallback< InsertTableCellOnlineResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = insertTableCellOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call insertTableOnlineValidateBeforeCall(InsertTableOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Inserts a new table to the document node.
     * @param request Request object
     * @return InsertTableOnlineResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public InsertTableOnlineResponse insertTableOnline(InsertTableOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< InsertTableOnlineResponse > resp = insertTableOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< InsertTableOnlineResponse > resp = insertTableOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Inserts a new table to the document node.
     * @param request Request object
     * @return ApiResponse< InsertTableOnlineResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< InsertTableOnlineResponse > insertTableOnlineWithHttpInfo(InsertTableOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = insertTableOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        InsertTableOnlineResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< InsertTableOnlineResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Inserts a new table to the document node. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call insertTableOnlineAsync(InsertTableOnlineRequest request, final ApiCallback< InsertTableOnlineResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = insertTableOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call insertTableRowValidateBeforeCall(InsertTableRowRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Inserts a new row to the table.
     * @param request Request object
     * @return TableRowResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public TableRowResponse insertTableRow(InsertTableRowRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< TableRowResponse > resp = insertTableRowWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< TableRowResponse > resp = insertTableRowWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Inserts a new row to the table.
     * @param request Request object
     * @return ApiResponse< TableRowResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< TableRowResponse > insertTableRowWithHttpInfo(InsertTableRowRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = insertTableRowValidateBeforeCall(request, null, null);
        Response response = call.execute();
        TableRowResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< TableRowResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Inserts a new row to the table. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call insertTableRowAsync(InsertTableRowRequest request, final ApiCallback< TableRowResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = insertTableRowValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call insertTableRowOnlineValidateBeforeCall(InsertTableRowOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Inserts a new row to the table.
     * @param request Request object
     * @return InsertTableRowOnlineResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public InsertTableRowOnlineResponse insertTableRowOnline(InsertTableRowOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< InsertTableRowOnlineResponse > resp = insertTableRowOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< InsertTableRowOnlineResponse > resp = insertTableRowOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Inserts a new row to the table.
     * @param request Request object
     * @return ApiResponse< InsertTableRowOnlineResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< InsertTableRowOnlineResponse > insertTableRowOnlineWithHttpInfo(InsertTableRowOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = insertTableRowOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        InsertTableRowOnlineResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< InsertTableRowOnlineResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Inserts a new row to the table. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call insertTableRowOnlineAsync(InsertTableRowOnlineRequest request, final ApiCallback< InsertTableRowOnlineResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = insertTableRowOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call insertWatermarkImageValidateBeforeCall(InsertWatermarkImageRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Inserts a new watermark image to the document.
     * @param request Request object
     * @return DocumentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public DocumentResponse insertWatermarkImage(InsertWatermarkImageRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< DocumentResponse > resp = insertWatermarkImageWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< DocumentResponse > resp = insertWatermarkImageWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Inserts a new watermark image to the document.
     * @param request Request object
     * @return ApiResponse< DocumentResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< DocumentResponse > insertWatermarkImageWithHttpInfo(InsertWatermarkImageRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = insertWatermarkImageValidateBeforeCall(request, null, null);
        Response response = call.execute();
        DocumentResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< DocumentResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Inserts a new watermark image to the document. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call insertWatermarkImageAsync(InsertWatermarkImageRequest request, final ApiCallback< DocumentResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = insertWatermarkImageValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call insertWatermarkImageOnlineValidateBeforeCall(InsertWatermarkImageOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Inserts a new watermark image to the document.
     * @param request Request object
     * @return InsertWatermarkImageOnlineResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public InsertWatermarkImageOnlineResponse insertWatermarkImageOnline(InsertWatermarkImageOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< InsertWatermarkImageOnlineResponse > resp = insertWatermarkImageOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< InsertWatermarkImageOnlineResponse > resp = insertWatermarkImageOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Inserts a new watermark image to the document.
     * @param request Request object
     * @return ApiResponse< InsertWatermarkImageOnlineResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< InsertWatermarkImageOnlineResponse > insertWatermarkImageOnlineWithHttpInfo(InsertWatermarkImageOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = insertWatermarkImageOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        InsertWatermarkImageOnlineResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< InsertWatermarkImageOnlineResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Inserts a new watermark image to the document. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call insertWatermarkImageOnlineAsync(InsertWatermarkImageOnlineRequest request, final ApiCallback< InsertWatermarkImageOnlineResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = insertWatermarkImageOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call insertWatermarkTextValidateBeforeCall(InsertWatermarkTextRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Inserts a new watermark text to the document.
     * @param request Request object
     * @return DocumentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public DocumentResponse insertWatermarkText(InsertWatermarkTextRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< DocumentResponse > resp = insertWatermarkTextWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< DocumentResponse > resp = insertWatermarkTextWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Inserts a new watermark text to the document.
     * @param request Request object
     * @return ApiResponse< DocumentResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< DocumentResponse > insertWatermarkTextWithHttpInfo(InsertWatermarkTextRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = insertWatermarkTextValidateBeforeCall(request, null, null);
        Response response = call.execute();
        DocumentResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< DocumentResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Inserts a new watermark text to the document. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call insertWatermarkTextAsync(InsertWatermarkTextRequest request, final ApiCallback< DocumentResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = insertWatermarkTextValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call insertWatermarkTextOnlineValidateBeforeCall(InsertWatermarkTextOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Inserts a new watermark text to the document.
     * @param request Request object
     * @return InsertWatermarkTextOnlineResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public InsertWatermarkTextOnlineResponse insertWatermarkTextOnline(InsertWatermarkTextOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< InsertWatermarkTextOnlineResponse > resp = insertWatermarkTextOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< InsertWatermarkTextOnlineResponse > resp = insertWatermarkTextOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Inserts a new watermark text to the document.
     * @param request Request object
     * @return ApiResponse< InsertWatermarkTextOnlineResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< InsertWatermarkTextOnlineResponse > insertWatermarkTextOnlineWithHttpInfo(InsertWatermarkTextOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = insertWatermarkTextOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        InsertWatermarkTextOnlineResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< InsertWatermarkTextOnlineResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Inserts a new watermark text to the document. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call insertWatermarkTextOnlineAsync(InsertWatermarkTextOnlineRequest request, final ApiCallback< InsertWatermarkTextOnlineResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = insertWatermarkTextOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call loadWebDocumentValidateBeforeCall(LoadWebDocumentRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Downloads a document from the Web using URL and saves it to cloud storage in the specified format.
     * @param request Request object
     * @return SaveResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public SaveResponse loadWebDocument(LoadWebDocumentRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< SaveResponse > resp = loadWebDocumentWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< SaveResponse > resp = loadWebDocumentWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Downloads a document from the Web using URL and saves it to cloud storage in the specified format.
     * @param request Request object
     * @return ApiResponse< SaveResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< SaveResponse > loadWebDocumentWithHttpInfo(LoadWebDocumentRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = loadWebDocumentValidateBeforeCall(request, null, null);
        Response response = call.execute();
        SaveResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< SaveResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Downloads a document from the Web using URL and saves it to cloud storage in the specified format. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call loadWebDocumentAsync(LoadWebDocumentRequest request, final ApiCallback< SaveResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = loadWebDocumentValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call moveFileValidateBeforeCall(MoveFileRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Move file.
     * @param request Request object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public void moveFile(MoveFileRequest request) throws ApiException, MessagingException, IOException {
        try {
    moveFileWithHttpInfo(request);
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
    moveFileWithHttpInfo(request);
            }
            throw ex;
        }
    }

    /**
     * Move file.
     * @param request Request object
     * @return ApiResponse< void >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< Void > moveFileWithHttpInfo(MoveFileRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = moveFileValidateBeforeCall(request, null, null);
        return apiClient.execute(call);
    }

    /**
     * Move file. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call moveFileAsync(MoveFileRequest request, final ApiCallback< Void > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = moveFileValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call moveFolderValidateBeforeCall(MoveFolderRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Move folder.
     * @param request Request object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public void moveFolder(MoveFolderRequest request) throws ApiException, MessagingException, IOException {
        try {
    moveFolderWithHttpInfo(request);
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
    moveFolderWithHttpInfo(request);
            }
            throw ex;
        }
    }

    /**
     * Move folder.
     * @param request Request object
     * @return ApiResponse< void >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< Void > moveFolderWithHttpInfo(MoveFolderRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = moveFolderValidateBeforeCall(request, null, null);
        return apiClient.execute(call);
    }

    /**
     * Move folder. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call moveFolderAsync(MoveFolderRequest request, final ApiCallback< Void > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = moveFolderValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call optimizeDocumentValidateBeforeCall(OptimizeDocumentRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Applies document content optimization options, specific to a particular versions of Microsoft Word.
     * @param request Request object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public void optimizeDocument(OptimizeDocumentRequest request) throws ApiException, MessagingException, IOException {
        try {
    optimizeDocumentWithHttpInfo(request);
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
    optimizeDocumentWithHttpInfo(request);
            }
            throw ex;
        }
    }

    /**
     * Applies document content optimization options, specific to a particular versions of Microsoft Word.
     * @param request Request object
     * @return ApiResponse< void >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< Void > optimizeDocumentWithHttpInfo(OptimizeDocumentRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = optimizeDocumentValidateBeforeCall(request, null, null);
        return apiClient.execute(call);
    }

    /**
     * Applies document content optimization options, specific to a particular versions of Microsoft Word. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call optimizeDocumentAsync(OptimizeDocumentRequest request, final ApiCallback< Void > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = optimizeDocumentValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call optimizeDocumentOnlineValidateBeforeCall(OptimizeDocumentOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Applies document content optimization options, specific to a particular versions of Microsoft Word.
     * @param request Request object
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public File optimizeDocumentOnline(OptimizeDocumentOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< File > resp = optimizeDocumentOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< File > resp = optimizeDocumentOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Applies document content optimization options, specific to a particular versions of Microsoft Word.
     * @param request Request object
     * @return ApiResponse< File >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< File > optimizeDocumentOnlineWithHttpInfo(OptimizeDocumentOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = optimizeDocumentOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        File data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< File >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Applies document content optimization options, specific to a particular versions of Microsoft Word. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call optimizeDocumentOnlineAsync(OptimizeDocumentOnlineRequest request, final ApiCallback< File > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = optimizeDocumentOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call protectDocumentValidateBeforeCall(ProtectDocumentRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Adds protection to the document.
     * @param request Request object
     * @return ProtectionDataResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public ProtectionDataResponse protectDocument(ProtectDocumentRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< ProtectionDataResponse > resp = protectDocumentWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< ProtectionDataResponse > resp = protectDocumentWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Adds protection to the document.
     * @param request Request object
     * @return ApiResponse< ProtectionDataResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< ProtectionDataResponse > protectDocumentWithHttpInfo(ProtectDocumentRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = protectDocumentValidateBeforeCall(request, null, null);
        Response response = call.execute();
        ProtectionDataResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< ProtectionDataResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Adds protection to the document. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call protectDocumentAsync(ProtectDocumentRequest request, final ApiCallback< ProtectionDataResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = protectDocumentValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call protectDocumentOnlineValidateBeforeCall(ProtectDocumentOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Adds protection to the document.
     * @param request Request object
     * @return ProtectDocumentOnlineResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public ProtectDocumentOnlineResponse protectDocumentOnline(ProtectDocumentOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< ProtectDocumentOnlineResponse > resp = protectDocumentOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< ProtectDocumentOnlineResponse > resp = protectDocumentOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Adds protection to the document.
     * @param request Request object
     * @return ApiResponse< ProtectDocumentOnlineResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< ProtectDocumentOnlineResponse > protectDocumentOnlineWithHttpInfo(ProtectDocumentOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = protectDocumentOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        ProtectDocumentOnlineResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< ProtectDocumentOnlineResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Adds protection to the document. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call protectDocumentOnlineAsync(ProtectDocumentOnlineRequest request, final ApiCallback< ProtectDocumentOnlineResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = protectDocumentOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call rejectAllRevisionsValidateBeforeCall(RejectAllRevisionsRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Rejects all revisions in the document.
     * @param request Request object
     * @return RevisionsModificationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public RevisionsModificationResponse rejectAllRevisions(RejectAllRevisionsRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< RevisionsModificationResponse > resp = rejectAllRevisionsWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< RevisionsModificationResponse > resp = rejectAllRevisionsWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Rejects all revisions in the document.
     * @param request Request object
     * @return ApiResponse< RevisionsModificationResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< RevisionsModificationResponse > rejectAllRevisionsWithHttpInfo(RejectAllRevisionsRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = rejectAllRevisionsValidateBeforeCall(request, null, null);
        Response response = call.execute();
        RevisionsModificationResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< RevisionsModificationResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Rejects all revisions in the document. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call rejectAllRevisionsAsync(RejectAllRevisionsRequest request, final ApiCallback< RevisionsModificationResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = rejectAllRevisionsValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call rejectAllRevisionsOnlineValidateBeforeCall(RejectAllRevisionsOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Rejects all revisions in the document.
     * @param request Request object
     * @return RejectAllRevisionsOnlineResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public RejectAllRevisionsOnlineResponse rejectAllRevisionsOnline(RejectAllRevisionsOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< RejectAllRevisionsOnlineResponse > resp = rejectAllRevisionsOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< RejectAllRevisionsOnlineResponse > resp = rejectAllRevisionsOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Rejects all revisions in the document.
     * @param request Request object
     * @return ApiResponse< RejectAllRevisionsOnlineResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< RejectAllRevisionsOnlineResponse > rejectAllRevisionsOnlineWithHttpInfo(RejectAllRevisionsOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = rejectAllRevisionsOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        RejectAllRevisionsOnlineResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< RejectAllRevisionsOnlineResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Rejects all revisions in the document. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call rejectAllRevisionsOnlineAsync(RejectAllRevisionsOnlineRequest request, final ApiCallback< RejectAllRevisionsOnlineResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = rejectAllRevisionsOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call removeRangeValidateBeforeCall(RemoveRangeRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Removes a range from the document.
     * @param request Request object
     * @return DocumentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public DocumentResponse removeRange(RemoveRangeRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< DocumentResponse > resp = removeRangeWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< DocumentResponse > resp = removeRangeWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Removes a range from the document.
     * @param request Request object
     * @return ApiResponse< DocumentResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< DocumentResponse > removeRangeWithHttpInfo(RemoveRangeRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = removeRangeValidateBeforeCall(request, null, null);
        Response response = call.execute();
        DocumentResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< DocumentResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Removes a range from the document. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call removeRangeAsync(RemoveRangeRequest request, final ApiCallback< DocumentResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = removeRangeValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call removeRangeOnlineValidateBeforeCall(RemoveRangeOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Removes a range from the document.
     * @param request Request object
     * @return RemoveRangeOnlineResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public RemoveRangeOnlineResponse removeRangeOnline(RemoveRangeOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< RemoveRangeOnlineResponse > resp = removeRangeOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< RemoveRangeOnlineResponse > resp = removeRangeOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Removes a range from the document.
     * @param request Request object
     * @return ApiResponse< RemoveRangeOnlineResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< RemoveRangeOnlineResponse > removeRangeOnlineWithHttpInfo(RemoveRangeOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = removeRangeOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        RemoveRangeOnlineResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< RemoveRangeOnlineResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Removes a range from the document. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call removeRangeOnlineAsync(RemoveRangeOnlineRequest request, final ApiCallback< RemoveRangeOnlineResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = removeRangeOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call renderDrawingObjectValidateBeforeCall(RenderDrawingObjectRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Renders a DrawingObject to the specified format.
     * @param request Request object
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public File renderDrawingObject(RenderDrawingObjectRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< File > resp = renderDrawingObjectWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< File > resp = renderDrawingObjectWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Renders a DrawingObject to the specified format.
     * @param request Request object
     * @return ApiResponse< File >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< File > renderDrawingObjectWithHttpInfo(RenderDrawingObjectRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = renderDrawingObjectValidateBeforeCall(request, null, null);
        Response response = call.execute();
        File data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< File >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Renders a DrawingObject to the specified format. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call renderDrawingObjectAsync(RenderDrawingObjectRequest request, final ApiCallback< File > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = renderDrawingObjectValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call renderDrawingObjectOnlineValidateBeforeCall(RenderDrawingObjectOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Renders a DrawingObject to the specified format.
     * @param request Request object
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public File renderDrawingObjectOnline(RenderDrawingObjectOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< File > resp = renderDrawingObjectOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< File > resp = renderDrawingObjectOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Renders a DrawingObject to the specified format.
     * @param request Request object
     * @return ApiResponse< File >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< File > renderDrawingObjectOnlineWithHttpInfo(RenderDrawingObjectOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = renderDrawingObjectOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        File data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< File >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Renders a DrawingObject to the specified format. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call renderDrawingObjectOnlineAsync(RenderDrawingObjectOnlineRequest request, final ApiCallback< File > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = renderDrawingObjectOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call renderMathObjectValidateBeforeCall(RenderMathObjectRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Renders an OfficeMath object to the specified format.
     * @param request Request object
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public File renderMathObject(RenderMathObjectRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< File > resp = renderMathObjectWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< File > resp = renderMathObjectWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Renders an OfficeMath object to the specified format.
     * @param request Request object
     * @return ApiResponse< File >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< File > renderMathObjectWithHttpInfo(RenderMathObjectRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = renderMathObjectValidateBeforeCall(request, null, null);
        Response response = call.execute();
        File data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< File >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Renders an OfficeMath object to the specified format. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call renderMathObjectAsync(RenderMathObjectRequest request, final ApiCallback< File > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = renderMathObjectValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call renderMathObjectOnlineValidateBeforeCall(RenderMathObjectOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Renders an OfficeMath object to the specified format.
     * @param request Request object
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public File renderMathObjectOnline(RenderMathObjectOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< File > resp = renderMathObjectOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< File > resp = renderMathObjectOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Renders an OfficeMath object to the specified format.
     * @param request Request object
     * @return ApiResponse< File >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< File > renderMathObjectOnlineWithHttpInfo(RenderMathObjectOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = renderMathObjectOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        File data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< File >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Renders an OfficeMath object to the specified format. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call renderMathObjectOnlineAsync(RenderMathObjectOnlineRequest request, final ApiCallback< File > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = renderMathObjectOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call renderPageValidateBeforeCall(RenderPageRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Renders a page to the specified format.
     * @param request Request object
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public File renderPage(RenderPageRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< File > resp = renderPageWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< File > resp = renderPageWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Renders a page to the specified format.
     * @param request Request object
     * @return ApiResponse< File >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< File > renderPageWithHttpInfo(RenderPageRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = renderPageValidateBeforeCall(request, null, null);
        Response response = call.execute();
        File data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< File >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Renders a page to the specified format. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call renderPageAsync(RenderPageRequest request, final ApiCallback< File > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = renderPageValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call renderPageOnlineValidateBeforeCall(RenderPageOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Renders a page to the specified format.
     * @param request Request object
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public File renderPageOnline(RenderPageOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< File > resp = renderPageOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< File > resp = renderPageOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Renders a page to the specified format.
     * @param request Request object
     * @return ApiResponse< File >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< File > renderPageOnlineWithHttpInfo(RenderPageOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = renderPageOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        File data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< File >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Renders a page to the specified format. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call renderPageOnlineAsync(RenderPageOnlineRequest request, final ApiCallback< File > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = renderPageOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call renderParagraphValidateBeforeCall(RenderParagraphRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Renders a paragraph to the specified format.
     * @param request Request object
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public File renderParagraph(RenderParagraphRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< File > resp = renderParagraphWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< File > resp = renderParagraphWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Renders a paragraph to the specified format.
     * @param request Request object
     * @return ApiResponse< File >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< File > renderParagraphWithHttpInfo(RenderParagraphRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = renderParagraphValidateBeforeCall(request, null, null);
        Response response = call.execute();
        File data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< File >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Renders a paragraph to the specified format. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call renderParagraphAsync(RenderParagraphRequest request, final ApiCallback< File > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = renderParagraphValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call renderParagraphOnlineValidateBeforeCall(RenderParagraphOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Renders a paragraph to the specified format.
     * @param request Request object
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public File renderParagraphOnline(RenderParagraphOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< File > resp = renderParagraphOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< File > resp = renderParagraphOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Renders a paragraph to the specified format.
     * @param request Request object
     * @return ApiResponse< File >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< File > renderParagraphOnlineWithHttpInfo(RenderParagraphOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = renderParagraphOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        File data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< File >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Renders a paragraph to the specified format. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call renderParagraphOnlineAsync(RenderParagraphOnlineRequest request, final ApiCallback< File > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = renderParagraphOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call renderTableValidateBeforeCall(RenderTableRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Renders a table to the specified format.
     * @param request Request object
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public File renderTable(RenderTableRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< File > resp = renderTableWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< File > resp = renderTableWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Renders a table to the specified format.
     * @param request Request object
     * @return ApiResponse< File >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< File > renderTableWithHttpInfo(RenderTableRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = renderTableValidateBeforeCall(request, null, null);
        Response response = call.execute();
        File data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< File >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Renders a table to the specified format. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call renderTableAsync(RenderTableRequest request, final ApiCallback< File > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = renderTableValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call renderTableOnlineValidateBeforeCall(RenderTableOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Renders a table to the specified format.
     * @param request Request object
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public File renderTableOnline(RenderTableOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< File > resp = renderTableOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< File > resp = renderTableOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Renders a table to the specified format.
     * @param request Request object
     * @return ApiResponse< File >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< File > renderTableOnlineWithHttpInfo(RenderTableOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = renderTableOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        File data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< File >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Renders a table to the specified format. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call renderTableOnlineAsync(RenderTableOnlineRequest request, final ApiCallback< File > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = renderTableOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call replaceTextValidateBeforeCall(ReplaceTextRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Replaces text in the document.
     * @param request Request object
     * @return ReplaceTextResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public ReplaceTextResponse replaceText(ReplaceTextRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< ReplaceTextResponse > resp = replaceTextWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< ReplaceTextResponse > resp = replaceTextWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Replaces text in the document.
     * @param request Request object
     * @return ApiResponse< ReplaceTextResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< ReplaceTextResponse > replaceTextWithHttpInfo(ReplaceTextRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = replaceTextValidateBeforeCall(request, null, null);
        Response response = call.execute();
        ReplaceTextResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< ReplaceTextResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Replaces text in the document. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call replaceTextAsync(ReplaceTextRequest request, final ApiCallback< ReplaceTextResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = replaceTextValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call replaceTextOnlineValidateBeforeCall(ReplaceTextOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Replaces text in the document.
     * @param request Request object
     * @return ReplaceTextOnlineResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public ReplaceTextOnlineResponse replaceTextOnline(ReplaceTextOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< ReplaceTextOnlineResponse > resp = replaceTextOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< ReplaceTextOnlineResponse > resp = replaceTextOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Replaces text in the document.
     * @param request Request object
     * @return ApiResponse< ReplaceTextOnlineResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< ReplaceTextOnlineResponse > replaceTextOnlineWithHttpInfo(ReplaceTextOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = replaceTextOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        ReplaceTextOnlineResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< ReplaceTextOnlineResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Replaces text in the document. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call replaceTextOnlineAsync(ReplaceTextOnlineRequest request, final ApiCallback< ReplaceTextOnlineResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = replaceTextOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call replaceWithTextValidateBeforeCall(ReplaceWithTextRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Replaces a range with text in the document.
     * @param request Request object
     * @return DocumentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public DocumentResponse replaceWithText(ReplaceWithTextRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< DocumentResponse > resp = replaceWithTextWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< DocumentResponse > resp = replaceWithTextWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Replaces a range with text in the document.
     * @param request Request object
     * @return ApiResponse< DocumentResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< DocumentResponse > replaceWithTextWithHttpInfo(ReplaceWithTextRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = replaceWithTextValidateBeforeCall(request, null, null);
        Response response = call.execute();
        DocumentResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< DocumentResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Replaces a range with text in the document. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call replaceWithTextAsync(ReplaceWithTextRequest request, final ApiCallback< DocumentResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = replaceWithTextValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call replaceWithTextOnlineValidateBeforeCall(ReplaceWithTextOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Replaces a range with text in the document.
     * @param request Request object
     * @return ReplaceWithTextOnlineResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public ReplaceWithTextOnlineResponse replaceWithTextOnline(ReplaceWithTextOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< ReplaceWithTextOnlineResponse > resp = replaceWithTextOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< ReplaceWithTextOnlineResponse > resp = replaceWithTextOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Replaces a range with text in the document.
     * @param request Request object
     * @return ApiResponse< ReplaceWithTextOnlineResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< ReplaceWithTextOnlineResponse > replaceWithTextOnlineWithHttpInfo(ReplaceWithTextOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = replaceWithTextOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        ReplaceWithTextOnlineResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< ReplaceWithTextOnlineResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Replaces a range with text in the document. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call replaceWithTextOnlineAsync(ReplaceWithTextOnlineRequest request, final ApiCallback< ReplaceWithTextOnlineResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = replaceWithTextOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call resetCacheValidateBeforeCall(ResetCacheRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Clears the font cache.
     * @param request Request object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public void resetCache(ResetCacheRequest request) throws ApiException, MessagingException, IOException {
        try {
    resetCacheWithHttpInfo(request);
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
    resetCacheWithHttpInfo(request);
            }
            throw ex;
        }
    }

    /**
     * Clears the font cache.
     * @param request Request object
     * @return ApiResponse< void >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< Void > resetCacheWithHttpInfo(ResetCacheRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = resetCacheValidateBeforeCall(request, null, null);
        return apiClient.execute(call);
    }

    /**
     * Clears the font cache. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call resetCacheAsync(ResetCacheRequest request, final ApiCallback< Void > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = resetCacheValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call saveAsValidateBeforeCall(SaveAsRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Converts a document in cloud storage to the specified format.
     * @param request Request object
     * @return SaveResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public SaveResponse saveAs(SaveAsRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< SaveResponse > resp = saveAsWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< SaveResponse > resp = saveAsWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Converts a document in cloud storage to the specified format.
     * @param request Request object
     * @return ApiResponse< SaveResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< SaveResponse > saveAsWithHttpInfo(SaveAsRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = saveAsValidateBeforeCall(request, null, null);
        Response response = call.execute();
        SaveResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< SaveResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Converts a document in cloud storage to the specified format. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call saveAsAsync(SaveAsRequest request, final ApiCallback< SaveResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = saveAsValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call saveAsOnlineValidateBeforeCall(SaveAsOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Converts a document in cloud storage to the specified format.
     * @param request Request object
     * @return SaveAsOnlineResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public SaveAsOnlineResponse saveAsOnline(SaveAsOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< SaveAsOnlineResponse > resp = saveAsOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< SaveAsOnlineResponse > resp = saveAsOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Converts a document in cloud storage to the specified format.
     * @param request Request object
     * @return ApiResponse< SaveAsOnlineResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< SaveAsOnlineResponse > saveAsOnlineWithHttpInfo(SaveAsOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = saveAsOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        SaveAsOnlineResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< SaveAsOnlineResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Converts a document in cloud storage to the specified format. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call saveAsOnlineAsync(SaveAsOnlineRequest request, final ApiCallback< SaveAsOnlineResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = saveAsOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call saveAsRangeValidateBeforeCall(SaveAsRangeRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Saves a range as a new document.
     * @param request Request object
     * @return DocumentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public DocumentResponse saveAsRange(SaveAsRangeRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< DocumentResponse > resp = saveAsRangeWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< DocumentResponse > resp = saveAsRangeWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Saves a range as a new document.
     * @param request Request object
     * @return ApiResponse< DocumentResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< DocumentResponse > saveAsRangeWithHttpInfo(SaveAsRangeRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = saveAsRangeValidateBeforeCall(request, null, null);
        Response response = call.execute();
        DocumentResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< DocumentResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Saves a range as a new document. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call saveAsRangeAsync(SaveAsRangeRequest request, final ApiCallback< DocumentResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = saveAsRangeValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call saveAsRangeOnlineValidateBeforeCall(SaveAsRangeOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Saves a range as a new document.
     * @param request Request object
     * @return SaveAsRangeOnlineResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public SaveAsRangeOnlineResponse saveAsRangeOnline(SaveAsRangeOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< SaveAsRangeOnlineResponse > resp = saveAsRangeOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< SaveAsRangeOnlineResponse > resp = saveAsRangeOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Saves a range as a new document.
     * @param request Request object
     * @return ApiResponse< SaveAsRangeOnlineResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< SaveAsRangeOnlineResponse > saveAsRangeOnlineWithHttpInfo(SaveAsRangeOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = saveAsRangeOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        SaveAsRangeOnlineResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< SaveAsRangeOnlineResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Saves a range as a new document. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call saveAsRangeOnlineAsync(SaveAsRangeOnlineRequest request, final ApiCallback< SaveAsRangeOnlineResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = saveAsRangeOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call saveAsTiffValidateBeforeCall(SaveAsTiffRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Converts a document in cloud storage to TIFF format using detailed conversion settings.
     * @param request Request object
     * @return SaveResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public SaveResponse saveAsTiff(SaveAsTiffRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< SaveResponse > resp = saveAsTiffWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< SaveResponse > resp = saveAsTiffWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Converts a document in cloud storage to TIFF format using detailed conversion settings.
     * @param request Request object
     * @return ApiResponse< SaveResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< SaveResponse > saveAsTiffWithHttpInfo(SaveAsTiffRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = saveAsTiffValidateBeforeCall(request, null, null);
        Response response = call.execute();
        SaveResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< SaveResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Converts a document in cloud storage to TIFF format using detailed conversion settings. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call saveAsTiffAsync(SaveAsTiffRequest request, final ApiCallback< SaveResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = saveAsTiffValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call saveAsTiffOnlineValidateBeforeCall(SaveAsTiffOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Converts a document in cloud storage to TIFF format using detailed conversion settings.
     * @param request Request object
     * @return SaveAsTiffOnlineResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public SaveAsTiffOnlineResponse saveAsTiffOnline(SaveAsTiffOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< SaveAsTiffOnlineResponse > resp = saveAsTiffOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< SaveAsTiffOnlineResponse > resp = saveAsTiffOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Converts a document in cloud storage to TIFF format using detailed conversion settings.
     * @param request Request object
     * @return ApiResponse< SaveAsTiffOnlineResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< SaveAsTiffOnlineResponse > saveAsTiffOnlineWithHttpInfo(SaveAsTiffOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = saveAsTiffOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        SaveAsTiffOnlineResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< SaveAsTiffOnlineResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Converts a document in cloud storage to TIFF format using detailed conversion settings. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call saveAsTiffOnlineAsync(SaveAsTiffOnlineRequest request, final ApiCallback< SaveAsTiffOnlineResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = saveAsTiffOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call searchValidateBeforeCall(SearchRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Searches text, specified by the regular expression, in the document.
     * @param request Request object
     * @return SearchResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public SearchResponse search(SearchRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< SearchResponse > resp = searchWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< SearchResponse > resp = searchWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Searches text, specified by the regular expression, in the document.
     * @param request Request object
     * @return ApiResponse< SearchResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< SearchResponse > searchWithHttpInfo(SearchRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = searchValidateBeforeCall(request, null, null);
        Response response = call.execute();
        SearchResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< SearchResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Searches text, specified by the regular expression, in the document. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call searchAsync(SearchRequest request, final ApiCallback< SearchResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = searchValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call searchOnlineValidateBeforeCall(SearchOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Searches text, specified by the regular expression, in the document.
     * @param request Request object
     * @return SearchResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public SearchResponse searchOnline(SearchOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< SearchResponse > resp = searchOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< SearchResponse > resp = searchOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Searches text, specified by the regular expression, in the document.
     * @param request Request object
     * @return ApiResponse< SearchResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< SearchResponse > searchOnlineWithHttpInfo(SearchOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = searchOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        SearchResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< SearchResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Searches text, specified by the regular expression, in the document. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call searchOnlineAsync(SearchOnlineRequest request, final ApiCallback< SearchResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = searchOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call splitDocumentValidateBeforeCall(SplitDocumentRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Splits a document into parts and saves them in the specified format.
     * @param request Request object
     * @return SplitDocumentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public SplitDocumentResponse splitDocument(SplitDocumentRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< SplitDocumentResponse > resp = splitDocumentWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< SplitDocumentResponse > resp = splitDocumentWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Splits a document into parts and saves them in the specified format.
     * @param request Request object
     * @return ApiResponse< SplitDocumentResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< SplitDocumentResponse > splitDocumentWithHttpInfo(SplitDocumentRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = splitDocumentValidateBeforeCall(request, null, null);
        Response response = call.execute();
        SplitDocumentResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< SplitDocumentResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Splits a document into parts and saves them in the specified format. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call splitDocumentAsync(SplitDocumentRequest request, final ApiCallback< SplitDocumentResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = splitDocumentValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call splitDocumentOnlineValidateBeforeCall(SplitDocumentOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Splits a document into parts and saves them in the specified format.
     * @param request Request object
     * @return SplitDocumentOnlineResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public SplitDocumentOnlineResponse splitDocumentOnline(SplitDocumentOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< SplitDocumentOnlineResponse > resp = splitDocumentOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< SplitDocumentOnlineResponse > resp = splitDocumentOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Splits a document into parts and saves them in the specified format.
     * @param request Request object
     * @return ApiResponse< SplitDocumentOnlineResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< SplitDocumentOnlineResponse > splitDocumentOnlineWithHttpInfo(SplitDocumentOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = splitDocumentOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        SplitDocumentOnlineResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< SplitDocumentOnlineResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Splits a document into parts and saves them in the specified format. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call splitDocumentOnlineAsync(SplitDocumentOnlineRequest request, final ApiCallback< SplitDocumentOnlineResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = splitDocumentOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call unprotectDocumentValidateBeforeCall(UnprotectDocumentRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Removes protection from the document.
     * @param request Request object
     * @return ProtectionDataResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public ProtectionDataResponse unprotectDocument(UnprotectDocumentRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< ProtectionDataResponse > resp = unprotectDocumentWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< ProtectionDataResponse > resp = unprotectDocumentWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Removes protection from the document.
     * @param request Request object
     * @return ApiResponse< ProtectionDataResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< ProtectionDataResponse > unprotectDocumentWithHttpInfo(UnprotectDocumentRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = unprotectDocumentValidateBeforeCall(request, null, null);
        Response response = call.execute();
        ProtectionDataResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< ProtectionDataResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Removes protection from the document. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call unprotectDocumentAsync(UnprotectDocumentRequest request, final ApiCallback< ProtectionDataResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = unprotectDocumentValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call unprotectDocumentOnlineValidateBeforeCall(UnprotectDocumentOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Removes protection from the document.
     * @param request Request object
     * @return UnprotectDocumentOnlineResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public UnprotectDocumentOnlineResponse unprotectDocumentOnline(UnprotectDocumentOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< UnprotectDocumentOnlineResponse > resp = unprotectDocumentOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< UnprotectDocumentOnlineResponse > resp = unprotectDocumentOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Removes protection from the document.
     * @param request Request object
     * @return ApiResponse< UnprotectDocumentOnlineResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< UnprotectDocumentOnlineResponse > unprotectDocumentOnlineWithHttpInfo(UnprotectDocumentOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = unprotectDocumentOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        UnprotectDocumentOnlineResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< UnprotectDocumentOnlineResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Removes protection from the document. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call unprotectDocumentOnlineAsync(UnprotectDocumentOnlineRequest request, final ApiCallback< UnprotectDocumentOnlineResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = unprotectDocumentOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateBookmarkValidateBeforeCall(UpdateBookmarkRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Updates a bookmark in the document.
     * @param request Request object
     * @return BookmarkResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public BookmarkResponse updateBookmark(UpdateBookmarkRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< BookmarkResponse > resp = updateBookmarkWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< BookmarkResponse > resp = updateBookmarkWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Updates a bookmark in the document.
     * @param request Request object
     * @return ApiResponse< BookmarkResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< BookmarkResponse > updateBookmarkWithHttpInfo(UpdateBookmarkRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = updateBookmarkValidateBeforeCall(request, null, null);
        Response response = call.execute();
        BookmarkResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< BookmarkResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Updates a bookmark in the document. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateBookmarkAsync(UpdateBookmarkRequest request, final ApiCallback< BookmarkResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateBookmarkValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateBookmarkOnlineValidateBeforeCall(UpdateBookmarkOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Updates a bookmark in the document.
     * @param request Request object
     * @return UpdateBookmarkOnlineResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public UpdateBookmarkOnlineResponse updateBookmarkOnline(UpdateBookmarkOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< UpdateBookmarkOnlineResponse > resp = updateBookmarkOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< UpdateBookmarkOnlineResponse > resp = updateBookmarkOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Updates a bookmark in the document.
     * @param request Request object
     * @return ApiResponse< UpdateBookmarkOnlineResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< UpdateBookmarkOnlineResponse > updateBookmarkOnlineWithHttpInfo(UpdateBookmarkOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = updateBookmarkOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        UpdateBookmarkOnlineResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< UpdateBookmarkOnlineResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Updates a bookmark in the document. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateBookmarkOnlineAsync(UpdateBookmarkOnlineRequest request, final ApiCallback< UpdateBookmarkOnlineResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateBookmarkOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateBorderValidateBeforeCall(UpdateBorderRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * The 'nodePath' parameter should refer to a paragraph, a cell or a row.
     * @param request Request object
     * @return BorderResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public BorderResponse updateBorder(UpdateBorderRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< BorderResponse > resp = updateBorderWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< BorderResponse > resp = updateBorderWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * The 'nodePath' parameter should refer to a paragraph, a cell or a row.
     * @param request Request object
     * @return ApiResponse< BorderResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< BorderResponse > updateBorderWithHttpInfo(UpdateBorderRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = updateBorderValidateBeforeCall(request, null, null);
        Response response = call.execute();
        BorderResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< BorderResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * The 'nodePath' parameter should refer to a paragraph, a cell or a row. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateBorderAsync(UpdateBorderRequest request, final ApiCallback< BorderResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateBorderValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateBorderOnlineValidateBeforeCall(UpdateBorderOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Updates a border in the document node.
     * @param request Request object
     * @return UpdateBorderOnlineResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public UpdateBorderOnlineResponse updateBorderOnline(UpdateBorderOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< UpdateBorderOnlineResponse > resp = updateBorderOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< UpdateBorderOnlineResponse > resp = updateBorderOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Updates a border in the document node.
     * @param request Request object
     * @return ApiResponse< UpdateBorderOnlineResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< UpdateBorderOnlineResponse > updateBorderOnlineWithHttpInfo(UpdateBorderOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = updateBorderOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        UpdateBorderOnlineResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< UpdateBorderOnlineResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Updates a border in the document node. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateBorderOnlineAsync(UpdateBorderOnlineRequest request, final ApiCallback< UpdateBorderOnlineResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateBorderOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateCommentValidateBeforeCall(UpdateCommentRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Updates a comment in the document.
     * @param request Request object
     * @return CommentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public CommentResponse updateComment(UpdateCommentRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< CommentResponse > resp = updateCommentWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< CommentResponse > resp = updateCommentWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Updates a comment in the document.
     * @param request Request object
     * @return ApiResponse< CommentResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< CommentResponse > updateCommentWithHttpInfo(UpdateCommentRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = updateCommentValidateBeforeCall(request, null, null);
        Response response = call.execute();
        CommentResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< CommentResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Updates a comment in the document. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateCommentAsync(UpdateCommentRequest request, final ApiCallback< CommentResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateCommentValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateCommentOnlineValidateBeforeCall(UpdateCommentOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Updates a comment in the document.
     * @param request Request object
     * @return UpdateCommentOnlineResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public UpdateCommentOnlineResponse updateCommentOnline(UpdateCommentOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< UpdateCommentOnlineResponse > resp = updateCommentOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< UpdateCommentOnlineResponse > resp = updateCommentOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Updates a comment in the document.
     * @param request Request object
     * @return ApiResponse< UpdateCommentOnlineResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< UpdateCommentOnlineResponse > updateCommentOnlineWithHttpInfo(UpdateCommentOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = updateCommentOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        UpdateCommentOnlineResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< UpdateCommentOnlineResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Updates a comment in the document. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateCommentOnlineAsync(UpdateCommentOnlineRequest request, final ApiCallback< UpdateCommentOnlineResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateCommentOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateDrawingObjectValidateBeforeCall(UpdateDrawingObjectRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Updates a DrawingObject in the document node.
     * @param request Request object
     * @return DrawingObjectResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public DrawingObjectResponse updateDrawingObject(UpdateDrawingObjectRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< DrawingObjectResponse > resp = updateDrawingObjectWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< DrawingObjectResponse > resp = updateDrawingObjectWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Updates a DrawingObject in the document node.
     * @param request Request object
     * @return ApiResponse< DrawingObjectResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< DrawingObjectResponse > updateDrawingObjectWithHttpInfo(UpdateDrawingObjectRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = updateDrawingObjectValidateBeforeCall(request, null, null);
        Response response = call.execute();
        DrawingObjectResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< DrawingObjectResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Updates a DrawingObject in the document node. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateDrawingObjectAsync(UpdateDrawingObjectRequest request, final ApiCallback< DrawingObjectResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateDrawingObjectValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateDrawingObjectOnlineValidateBeforeCall(UpdateDrawingObjectOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Updates a DrawingObject in the document node.
     * @param request Request object
     * @return UpdateDrawingObjectOnlineResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public UpdateDrawingObjectOnlineResponse updateDrawingObjectOnline(UpdateDrawingObjectOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< UpdateDrawingObjectOnlineResponse > resp = updateDrawingObjectOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< UpdateDrawingObjectOnlineResponse > resp = updateDrawingObjectOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Updates a DrawingObject in the document node.
     * @param request Request object
     * @return ApiResponse< UpdateDrawingObjectOnlineResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< UpdateDrawingObjectOnlineResponse > updateDrawingObjectOnlineWithHttpInfo(UpdateDrawingObjectOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = updateDrawingObjectOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        UpdateDrawingObjectOnlineResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< UpdateDrawingObjectOnlineResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Updates a DrawingObject in the document node. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateDrawingObjectOnlineAsync(UpdateDrawingObjectOnlineRequest request, final ApiCallback< UpdateDrawingObjectOnlineResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateDrawingObjectOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateFieldValidateBeforeCall(UpdateFieldRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Updates a field in the document node.
     * @param request Request object
     * @return FieldResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public FieldResponse updateField(UpdateFieldRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< FieldResponse > resp = updateFieldWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< FieldResponse > resp = updateFieldWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Updates a field in the document node.
     * @param request Request object
     * @return ApiResponse< FieldResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< FieldResponse > updateFieldWithHttpInfo(UpdateFieldRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = updateFieldValidateBeforeCall(request, null, null);
        Response response = call.execute();
        FieldResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< FieldResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Updates a field in the document node. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateFieldAsync(UpdateFieldRequest request, final ApiCallback< FieldResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateFieldValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateFieldOnlineValidateBeforeCall(UpdateFieldOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Updates a field in the document node.
     * @param request Request object
     * @return UpdateFieldOnlineResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public UpdateFieldOnlineResponse updateFieldOnline(UpdateFieldOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< UpdateFieldOnlineResponse > resp = updateFieldOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< UpdateFieldOnlineResponse > resp = updateFieldOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Updates a field in the document node.
     * @param request Request object
     * @return ApiResponse< UpdateFieldOnlineResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< UpdateFieldOnlineResponse > updateFieldOnlineWithHttpInfo(UpdateFieldOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = updateFieldOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        UpdateFieldOnlineResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< UpdateFieldOnlineResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Updates a field in the document node. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateFieldOnlineAsync(UpdateFieldOnlineRequest request, final ApiCallback< UpdateFieldOnlineResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateFieldOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateFieldsValidateBeforeCall(UpdateFieldsRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Reevaluates field values in the document.
     * @param request Request object
     * @return DocumentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public DocumentResponse updateFields(UpdateFieldsRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< DocumentResponse > resp = updateFieldsWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< DocumentResponse > resp = updateFieldsWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Reevaluates field values in the document.
     * @param request Request object
     * @return ApiResponse< DocumentResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< DocumentResponse > updateFieldsWithHttpInfo(UpdateFieldsRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = updateFieldsValidateBeforeCall(request, null, null);
        Response response = call.execute();
        DocumentResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< DocumentResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Reevaluates field values in the document. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateFieldsAsync(UpdateFieldsRequest request, final ApiCallback< DocumentResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateFieldsValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateFieldsOnlineValidateBeforeCall(UpdateFieldsOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Reevaluates field values in the document.
     * @param request Request object
     * @return UpdateFieldsOnlineResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public UpdateFieldsOnlineResponse updateFieldsOnline(UpdateFieldsOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< UpdateFieldsOnlineResponse > resp = updateFieldsOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< UpdateFieldsOnlineResponse > resp = updateFieldsOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Reevaluates field values in the document.
     * @param request Request object
     * @return ApiResponse< UpdateFieldsOnlineResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< UpdateFieldsOnlineResponse > updateFieldsOnlineWithHttpInfo(UpdateFieldsOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = updateFieldsOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        UpdateFieldsOnlineResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< UpdateFieldsOnlineResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Reevaluates field values in the document. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateFieldsOnlineAsync(UpdateFieldsOnlineRequest request, final ApiCallback< UpdateFieldsOnlineResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateFieldsOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateFootnoteValidateBeforeCall(UpdateFootnoteRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Updates a footnote in the document node.
     * @param request Request object
     * @return FootnoteResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public FootnoteResponse updateFootnote(UpdateFootnoteRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< FootnoteResponse > resp = updateFootnoteWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< FootnoteResponse > resp = updateFootnoteWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Updates a footnote in the document node.
     * @param request Request object
     * @return ApiResponse< FootnoteResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< FootnoteResponse > updateFootnoteWithHttpInfo(UpdateFootnoteRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = updateFootnoteValidateBeforeCall(request, null, null);
        Response response = call.execute();
        FootnoteResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< FootnoteResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Updates a footnote in the document node. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateFootnoteAsync(UpdateFootnoteRequest request, final ApiCallback< FootnoteResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateFootnoteValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateFootnoteOnlineValidateBeforeCall(UpdateFootnoteOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Updates a footnote in the document node.
     * @param request Request object
     * @return UpdateFootnoteOnlineResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public UpdateFootnoteOnlineResponse updateFootnoteOnline(UpdateFootnoteOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< UpdateFootnoteOnlineResponse > resp = updateFootnoteOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< UpdateFootnoteOnlineResponse > resp = updateFootnoteOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Updates a footnote in the document node.
     * @param request Request object
     * @return ApiResponse< UpdateFootnoteOnlineResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< UpdateFootnoteOnlineResponse > updateFootnoteOnlineWithHttpInfo(UpdateFootnoteOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = updateFootnoteOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        UpdateFootnoteOnlineResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< UpdateFootnoteOnlineResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Updates a footnote in the document node. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateFootnoteOnlineAsync(UpdateFootnoteOnlineRequest request, final ApiCallback< UpdateFootnoteOnlineResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateFootnoteOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateFormFieldValidateBeforeCall(UpdateFormFieldRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Updates a form field in the document node.
     * @param request Request object
     * @return FormFieldResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public FormFieldResponse updateFormField(UpdateFormFieldRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< FormFieldResponse > resp = updateFormFieldWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< FormFieldResponse > resp = updateFormFieldWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Updates a form field in the document node.
     * @param request Request object
     * @return ApiResponse< FormFieldResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< FormFieldResponse > updateFormFieldWithHttpInfo(UpdateFormFieldRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = updateFormFieldValidateBeforeCall(request, null, null);
        Response response = call.execute();
        FormFieldResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< FormFieldResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Updates a form field in the document node. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateFormFieldAsync(UpdateFormFieldRequest request, final ApiCallback< FormFieldResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateFormFieldValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateFormFieldOnlineValidateBeforeCall(UpdateFormFieldOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Updates a form field in the document node.
     * @param request Request object
     * @return UpdateFormFieldOnlineResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public UpdateFormFieldOnlineResponse updateFormFieldOnline(UpdateFormFieldOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< UpdateFormFieldOnlineResponse > resp = updateFormFieldOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< UpdateFormFieldOnlineResponse > resp = updateFormFieldOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Updates a form field in the document node.
     * @param request Request object
     * @return ApiResponse< UpdateFormFieldOnlineResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< UpdateFormFieldOnlineResponse > updateFormFieldOnlineWithHttpInfo(UpdateFormFieldOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = updateFormFieldOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        UpdateFormFieldOnlineResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< UpdateFormFieldOnlineResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Updates a form field in the document node. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateFormFieldOnlineAsync(UpdateFormFieldOnlineRequest request, final ApiCallback< UpdateFormFieldOnlineResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateFormFieldOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateListValidateBeforeCall(UpdateListRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Updates a list in the document.
     * @param request Request object
     * @return ListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public ListResponse updateList(UpdateListRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< ListResponse > resp = updateListWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< ListResponse > resp = updateListWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Updates a list in the document.
     * @param request Request object
     * @return ApiResponse< ListResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< ListResponse > updateListWithHttpInfo(UpdateListRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = updateListValidateBeforeCall(request, null, null);
        Response response = call.execute();
        ListResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< ListResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Updates a list in the document. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateListAsync(UpdateListRequest request, final ApiCallback< ListResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateListValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateListLevelValidateBeforeCall(UpdateListLevelRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Updates the level of a List element in the document.
     * @param request Request object
     * @return ListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public ListResponse updateListLevel(UpdateListLevelRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< ListResponse > resp = updateListLevelWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< ListResponse > resp = updateListLevelWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Updates the level of a List element in the document.
     * @param request Request object
     * @return ApiResponse< ListResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< ListResponse > updateListLevelWithHttpInfo(UpdateListLevelRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = updateListLevelValidateBeforeCall(request, null, null);
        Response response = call.execute();
        ListResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< ListResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Updates the level of a List element in the document. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateListLevelAsync(UpdateListLevelRequest request, final ApiCallback< ListResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateListLevelValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateListLevelOnlineValidateBeforeCall(UpdateListLevelOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Updates the level of a List element in the document.
     * @param request Request object
     * @return UpdateListLevelOnlineResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public UpdateListLevelOnlineResponse updateListLevelOnline(UpdateListLevelOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< UpdateListLevelOnlineResponse > resp = updateListLevelOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< UpdateListLevelOnlineResponse > resp = updateListLevelOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Updates the level of a List element in the document.
     * @param request Request object
     * @return ApiResponse< UpdateListLevelOnlineResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< UpdateListLevelOnlineResponse > updateListLevelOnlineWithHttpInfo(UpdateListLevelOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = updateListLevelOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        UpdateListLevelOnlineResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< UpdateListLevelOnlineResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Updates the level of a List element in the document. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateListLevelOnlineAsync(UpdateListLevelOnlineRequest request, final ApiCallback< UpdateListLevelOnlineResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateListLevelOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateListOnlineValidateBeforeCall(UpdateListOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Updates a list in the document.
     * @param request Request object
     * @return UpdateListOnlineResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public UpdateListOnlineResponse updateListOnline(UpdateListOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< UpdateListOnlineResponse > resp = updateListOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< UpdateListOnlineResponse > resp = updateListOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Updates a list in the document.
     * @param request Request object
     * @return ApiResponse< UpdateListOnlineResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< UpdateListOnlineResponse > updateListOnlineWithHttpInfo(UpdateListOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = updateListOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        UpdateListOnlineResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< UpdateListOnlineResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Updates a list in the document. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateListOnlineAsync(UpdateListOnlineRequest request, final ApiCallback< UpdateListOnlineResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateListOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateParagraphFormatValidateBeforeCall(UpdateParagraphFormatRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Updates the formatting properties of a paragraph in the document node.
     * @param request Request object
     * @return ParagraphFormatResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public ParagraphFormatResponse updateParagraphFormat(UpdateParagraphFormatRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< ParagraphFormatResponse > resp = updateParagraphFormatWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< ParagraphFormatResponse > resp = updateParagraphFormatWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Updates the formatting properties of a paragraph in the document node.
     * @param request Request object
     * @return ApiResponse< ParagraphFormatResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< ParagraphFormatResponse > updateParagraphFormatWithHttpInfo(UpdateParagraphFormatRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = updateParagraphFormatValidateBeforeCall(request, null, null);
        Response response = call.execute();
        ParagraphFormatResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< ParagraphFormatResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Updates the formatting properties of a paragraph in the document node. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateParagraphFormatAsync(UpdateParagraphFormatRequest request, final ApiCallback< ParagraphFormatResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateParagraphFormatValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateParagraphFormatOnlineValidateBeforeCall(UpdateParagraphFormatOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Updates the formatting properties of a paragraph in the document node.
     * @param request Request object
     * @return UpdateParagraphFormatOnlineResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public UpdateParagraphFormatOnlineResponse updateParagraphFormatOnline(UpdateParagraphFormatOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< UpdateParagraphFormatOnlineResponse > resp = updateParagraphFormatOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< UpdateParagraphFormatOnlineResponse > resp = updateParagraphFormatOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Updates the formatting properties of a paragraph in the document node.
     * @param request Request object
     * @return ApiResponse< UpdateParagraphFormatOnlineResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< UpdateParagraphFormatOnlineResponse > updateParagraphFormatOnlineWithHttpInfo(UpdateParagraphFormatOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = updateParagraphFormatOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        UpdateParagraphFormatOnlineResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< UpdateParagraphFormatOnlineResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Updates the formatting properties of a paragraph in the document node. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateParagraphFormatOnlineAsync(UpdateParagraphFormatOnlineRequest request, final ApiCallback< UpdateParagraphFormatOnlineResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateParagraphFormatOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateParagraphListFormatValidateBeforeCall(UpdateParagraphListFormatRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Updates the formatting properties of a paragraph list in the document node.
     * @param request Request object
     * @return ParagraphListFormatResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public ParagraphListFormatResponse updateParagraphListFormat(UpdateParagraphListFormatRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< ParagraphListFormatResponse > resp = updateParagraphListFormatWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< ParagraphListFormatResponse > resp = updateParagraphListFormatWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Updates the formatting properties of a paragraph list in the document node.
     * @param request Request object
     * @return ApiResponse< ParagraphListFormatResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< ParagraphListFormatResponse > updateParagraphListFormatWithHttpInfo(UpdateParagraphListFormatRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = updateParagraphListFormatValidateBeforeCall(request, null, null);
        Response response = call.execute();
        ParagraphListFormatResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< ParagraphListFormatResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Updates the formatting properties of a paragraph list in the document node. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateParagraphListFormatAsync(UpdateParagraphListFormatRequest request, final ApiCallback< ParagraphListFormatResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateParagraphListFormatValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateParagraphListFormatOnlineValidateBeforeCall(UpdateParagraphListFormatOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Updates the formatting properties of a paragraph list in the document node.
     * @param request Request object
     * @return UpdateParagraphListFormatOnlineResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public UpdateParagraphListFormatOnlineResponse updateParagraphListFormatOnline(UpdateParagraphListFormatOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< UpdateParagraphListFormatOnlineResponse > resp = updateParagraphListFormatOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< UpdateParagraphListFormatOnlineResponse > resp = updateParagraphListFormatOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Updates the formatting properties of a paragraph list in the document node.
     * @param request Request object
     * @return ApiResponse< UpdateParagraphListFormatOnlineResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< UpdateParagraphListFormatOnlineResponse > updateParagraphListFormatOnlineWithHttpInfo(UpdateParagraphListFormatOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = updateParagraphListFormatOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        UpdateParagraphListFormatOnlineResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< UpdateParagraphListFormatOnlineResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Updates the formatting properties of a paragraph list in the document node. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateParagraphListFormatOnlineAsync(UpdateParagraphListFormatOnlineRequest request, final ApiCallback< UpdateParagraphListFormatOnlineResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateParagraphListFormatOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateRunValidateBeforeCall(UpdateRunRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Updates a Run object in the paragraph.
     * @param request Request object
     * @return RunResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public RunResponse updateRun(UpdateRunRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< RunResponse > resp = updateRunWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< RunResponse > resp = updateRunWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Updates a Run object in the paragraph.
     * @param request Request object
     * @return ApiResponse< RunResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< RunResponse > updateRunWithHttpInfo(UpdateRunRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = updateRunValidateBeforeCall(request, null, null);
        Response response = call.execute();
        RunResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< RunResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Updates a Run object in the paragraph. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateRunAsync(UpdateRunRequest request, final ApiCallback< RunResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateRunValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateRunFontValidateBeforeCall(UpdateRunFontRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Updates the font properties of a Run object in the paragraph.
     * @param request Request object
     * @return FontResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public FontResponse updateRunFont(UpdateRunFontRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< FontResponse > resp = updateRunFontWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< FontResponse > resp = updateRunFontWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Updates the font properties of a Run object in the paragraph.
     * @param request Request object
     * @return ApiResponse< FontResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< FontResponse > updateRunFontWithHttpInfo(UpdateRunFontRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = updateRunFontValidateBeforeCall(request, null, null);
        Response response = call.execute();
        FontResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< FontResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Updates the font properties of a Run object in the paragraph. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateRunFontAsync(UpdateRunFontRequest request, final ApiCallback< FontResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateRunFontValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateRunFontOnlineValidateBeforeCall(UpdateRunFontOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Updates the font properties of a Run object in the paragraph.
     * @param request Request object
     * @return UpdateRunFontOnlineResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public UpdateRunFontOnlineResponse updateRunFontOnline(UpdateRunFontOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< UpdateRunFontOnlineResponse > resp = updateRunFontOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< UpdateRunFontOnlineResponse > resp = updateRunFontOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Updates the font properties of a Run object in the paragraph.
     * @param request Request object
     * @return ApiResponse< UpdateRunFontOnlineResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< UpdateRunFontOnlineResponse > updateRunFontOnlineWithHttpInfo(UpdateRunFontOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = updateRunFontOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        UpdateRunFontOnlineResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< UpdateRunFontOnlineResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Updates the font properties of a Run object in the paragraph. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateRunFontOnlineAsync(UpdateRunFontOnlineRequest request, final ApiCallback< UpdateRunFontOnlineResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateRunFontOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateRunOnlineValidateBeforeCall(UpdateRunOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Updates a Run object in the paragraph.
     * @param request Request object
     * @return UpdateRunOnlineResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public UpdateRunOnlineResponse updateRunOnline(UpdateRunOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< UpdateRunOnlineResponse > resp = updateRunOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< UpdateRunOnlineResponse > resp = updateRunOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Updates a Run object in the paragraph.
     * @param request Request object
     * @return ApiResponse< UpdateRunOnlineResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< UpdateRunOnlineResponse > updateRunOnlineWithHttpInfo(UpdateRunOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = updateRunOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        UpdateRunOnlineResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< UpdateRunOnlineResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Updates a Run object in the paragraph. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateRunOnlineAsync(UpdateRunOnlineRequest request, final ApiCallback< UpdateRunOnlineResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateRunOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateSectionPageSetupValidateBeforeCall(UpdateSectionPageSetupRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Updates the page setup of a section in the document.
     * @param request Request object
     * @return SectionPageSetupResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public SectionPageSetupResponse updateSectionPageSetup(UpdateSectionPageSetupRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< SectionPageSetupResponse > resp = updateSectionPageSetupWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< SectionPageSetupResponse > resp = updateSectionPageSetupWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Updates the page setup of a section in the document.
     * @param request Request object
     * @return ApiResponse< SectionPageSetupResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< SectionPageSetupResponse > updateSectionPageSetupWithHttpInfo(UpdateSectionPageSetupRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = updateSectionPageSetupValidateBeforeCall(request, null, null);
        Response response = call.execute();
        SectionPageSetupResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< SectionPageSetupResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Updates the page setup of a section in the document. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateSectionPageSetupAsync(UpdateSectionPageSetupRequest request, final ApiCallback< SectionPageSetupResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateSectionPageSetupValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateSectionPageSetupOnlineValidateBeforeCall(UpdateSectionPageSetupOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Updates the page setup of a section in the document.
     * @param request Request object
     * @return UpdateSectionPageSetupOnlineResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public UpdateSectionPageSetupOnlineResponse updateSectionPageSetupOnline(UpdateSectionPageSetupOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< UpdateSectionPageSetupOnlineResponse > resp = updateSectionPageSetupOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< UpdateSectionPageSetupOnlineResponse > resp = updateSectionPageSetupOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Updates the page setup of a section in the document.
     * @param request Request object
     * @return ApiResponse< UpdateSectionPageSetupOnlineResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< UpdateSectionPageSetupOnlineResponse > updateSectionPageSetupOnlineWithHttpInfo(UpdateSectionPageSetupOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = updateSectionPageSetupOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        UpdateSectionPageSetupOnlineResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< UpdateSectionPageSetupOnlineResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Updates the page setup of a section in the document. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateSectionPageSetupOnlineAsync(UpdateSectionPageSetupOnlineRequest request, final ApiCallback< UpdateSectionPageSetupOnlineResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateSectionPageSetupOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateStyleValidateBeforeCall(UpdateStyleRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Updates a style in the document.
     * @param request Request object
     * @return StyleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public StyleResponse updateStyle(UpdateStyleRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< StyleResponse > resp = updateStyleWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< StyleResponse > resp = updateStyleWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Updates a style in the document.
     * @param request Request object
     * @return ApiResponse< StyleResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< StyleResponse > updateStyleWithHttpInfo(UpdateStyleRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = updateStyleValidateBeforeCall(request, null, null);
        Response response = call.execute();
        StyleResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< StyleResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Updates a style in the document. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateStyleAsync(UpdateStyleRequest request, final ApiCallback< StyleResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateStyleValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateStyleOnlineValidateBeforeCall(UpdateStyleOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Updates a style in the document.
     * @param request Request object
     * @return UpdateStyleOnlineResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public UpdateStyleOnlineResponse updateStyleOnline(UpdateStyleOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< UpdateStyleOnlineResponse > resp = updateStyleOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< UpdateStyleOnlineResponse > resp = updateStyleOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Updates a style in the document.
     * @param request Request object
     * @return ApiResponse< UpdateStyleOnlineResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< UpdateStyleOnlineResponse > updateStyleOnlineWithHttpInfo(UpdateStyleOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = updateStyleOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        UpdateStyleOnlineResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< UpdateStyleOnlineResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Updates a style in the document. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateStyleOnlineAsync(UpdateStyleOnlineRequest request, final ApiCallback< UpdateStyleOnlineResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateStyleOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateTableCellFormatValidateBeforeCall(UpdateTableCellFormatRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Updates the formatting properties of a cell in the table row.
     * @param request Request object
     * @return TableCellFormatResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public TableCellFormatResponse updateTableCellFormat(UpdateTableCellFormatRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< TableCellFormatResponse > resp = updateTableCellFormatWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< TableCellFormatResponse > resp = updateTableCellFormatWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Updates the formatting properties of a cell in the table row.
     * @param request Request object
     * @return ApiResponse< TableCellFormatResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< TableCellFormatResponse > updateTableCellFormatWithHttpInfo(UpdateTableCellFormatRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = updateTableCellFormatValidateBeforeCall(request, null, null);
        Response response = call.execute();
        TableCellFormatResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< TableCellFormatResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Updates the formatting properties of a cell in the table row. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateTableCellFormatAsync(UpdateTableCellFormatRequest request, final ApiCallback< TableCellFormatResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateTableCellFormatValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateTableCellFormatOnlineValidateBeforeCall(UpdateTableCellFormatOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Updates the formatting properties of a cell in the table row.
     * @param request Request object
     * @return UpdateTableCellFormatOnlineResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public UpdateTableCellFormatOnlineResponse updateTableCellFormatOnline(UpdateTableCellFormatOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< UpdateTableCellFormatOnlineResponse > resp = updateTableCellFormatOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< UpdateTableCellFormatOnlineResponse > resp = updateTableCellFormatOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Updates the formatting properties of a cell in the table row.
     * @param request Request object
     * @return ApiResponse< UpdateTableCellFormatOnlineResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< UpdateTableCellFormatOnlineResponse > updateTableCellFormatOnlineWithHttpInfo(UpdateTableCellFormatOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = updateTableCellFormatOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        UpdateTableCellFormatOnlineResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< UpdateTableCellFormatOnlineResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Updates the formatting properties of a cell in the table row. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateTableCellFormatOnlineAsync(UpdateTableCellFormatOnlineRequest request, final ApiCallback< UpdateTableCellFormatOnlineResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateTableCellFormatOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateTablePropertiesValidateBeforeCall(UpdateTablePropertiesRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Updates properties of a table in the document node.
     * @param request Request object
     * @return TablePropertiesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public TablePropertiesResponse updateTableProperties(UpdateTablePropertiesRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< TablePropertiesResponse > resp = updateTablePropertiesWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< TablePropertiesResponse > resp = updateTablePropertiesWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Updates properties of a table in the document node.
     * @param request Request object
     * @return ApiResponse< TablePropertiesResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< TablePropertiesResponse > updateTablePropertiesWithHttpInfo(UpdateTablePropertiesRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = updateTablePropertiesValidateBeforeCall(request, null, null);
        Response response = call.execute();
        TablePropertiesResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< TablePropertiesResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Updates properties of a table in the document node. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateTablePropertiesAsync(UpdateTablePropertiesRequest request, final ApiCallback< TablePropertiesResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateTablePropertiesValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateTablePropertiesOnlineValidateBeforeCall(UpdateTablePropertiesOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Updates properties of a table in the document node.
     * @param request Request object
     * @return UpdateTablePropertiesOnlineResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public UpdateTablePropertiesOnlineResponse updateTablePropertiesOnline(UpdateTablePropertiesOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< UpdateTablePropertiesOnlineResponse > resp = updateTablePropertiesOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< UpdateTablePropertiesOnlineResponse > resp = updateTablePropertiesOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Updates properties of a table in the document node.
     * @param request Request object
     * @return ApiResponse< UpdateTablePropertiesOnlineResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< UpdateTablePropertiesOnlineResponse > updateTablePropertiesOnlineWithHttpInfo(UpdateTablePropertiesOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = updateTablePropertiesOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        UpdateTablePropertiesOnlineResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< UpdateTablePropertiesOnlineResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Updates properties of a table in the document node. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateTablePropertiesOnlineAsync(UpdateTablePropertiesOnlineRequest request, final ApiCallback< UpdateTablePropertiesOnlineResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateTablePropertiesOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateTableRowFormatValidateBeforeCall(UpdateTableRowFormatRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Updates the formatting properties of a table row.
     * @param request Request object
     * @return TableRowFormatResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public TableRowFormatResponse updateTableRowFormat(UpdateTableRowFormatRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< TableRowFormatResponse > resp = updateTableRowFormatWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< TableRowFormatResponse > resp = updateTableRowFormatWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Updates the formatting properties of a table row.
     * @param request Request object
     * @return ApiResponse< TableRowFormatResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< TableRowFormatResponse > updateTableRowFormatWithHttpInfo(UpdateTableRowFormatRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = updateTableRowFormatValidateBeforeCall(request, null, null);
        Response response = call.execute();
        TableRowFormatResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< TableRowFormatResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Updates the formatting properties of a table row. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateTableRowFormatAsync(UpdateTableRowFormatRequest request, final ApiCallback< TableRowFormatResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateTableRowFormatValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateTableRowFormatOnlineValidateBeforeCall(UpdateTableRowFormatOnlineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Updates the formatting properties of a table row.
     * @param request Request object
     * @return UpdateTableRowFormatOnlineResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public UpdateTableRowFormatOnlineResponse updateTableRowFormatOnline(UpdateTableRowFormatOnlineRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< UpdateTableRowFormatOnlineResponse > resp = updateTableRowFormatOnlineWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< UpdateTableRowFormatOnlineResponse > resp = updateTableRowFormatOnlineWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Updates the formatting properties of a table row.
     * @param request Request object
     * @return ApiResponse< UpdateTableRowFormatOnlineResponse >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< UpdateTableRowFormatOnlineResponse > updateTableRowFormatOnlineWithHttpInfo(UpdateTableRowFormatOnlineRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = updateTableRowFormatOnlineValidateBeforeCall(request, null, null);
        Response response = call.execute();
        UpdateTableRowFormatOnlineResponse data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< UpdateTableRowFormatOnlineResponse >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Updates the formatting properties of a table row. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateTableRowFormatOnlineAsync(UpdateTableRowFormatOnlineRequest request, final ApiCallback< UpdateTableRowFormatOnlineResponse > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateTableRowFormatOnlineValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call uploadFileValidateBeforeCall(UploadFileRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, IOException {
        return apiClient.buildCall(request.buildHttpRequest(apiClient, progressListener, progressRequestListener, true));
    }

    /**
     * Upload file.
     * @param request Request object
     * @return FilesUploadResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    public FilesUploadResult uploadFile(UploadFileRequest request) throws ApiException, MessagingException, IOException {
        try {
            ApiResponse< FilesUploadResult > resp = uploadFileWithHttpInfo(request);
            return resp.getData();
        }
        catch (ApiException ex) {
            if (ex.getCode() == apiClient.getNotAuthCode()) {
                apiClient.requestToken();
                ApiResponse< FilesUploadResult > resp = uploadFileWithHttpInfo(request);
                return resp.getData();
            }
            throw ex;
        }
    }

    /**
     * Upload file.
     * @param request Request object
     * @return ApiResponse< FilesUploadResult >;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws IOException If fail to serialize the request body object
     */
    private ApiResponse< FilesUploadResult > uploadFileWithHttpInfo(UploadFileRequest request) throws ApiException, MessagingException, IOException {
        com.squareup.okhttp.Call call = uploadFileValidateBeforeCall(request, null, null);
        Response response = call.execute();
        FilesUploadResult data = request.deserializeResponse(apiClient, response);
        return new ApiResponse< FilesUploadResult >(response.code(), response.headers().toMultimap(), data);
    }

    /**
     * Upload file. (asynchronously)
     * @param request Request object
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws IOException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call uploadFileAsync(UploadFileRequest request, final ApiCallback< FilesUploadResult > callback) throws ApiException, MessagingException, IOException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = uploadFileValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, request.getResponseType(), callback);
        return call;
    }

    public Object[] batch(RequestIfc... requests) throws ApiException, IOException {
        if (requests == null || requests.length == 0) {
             return null;
        }

        com.squareup.okhttp.Request masterRequest = apiClient.buildBatchRequest(requests);
        com.squareup.okhttp.Call call = apiClient.buildCall(masterRequest);
        ApiResponse<javax.mail.internet.MimeMultipart> response = apiClient.execute(call, javax.mail.internet.MimeMultipart.class);

        try {
            int count = response.getData().getCount();
            if (count != requests.length) {
                throw new ApiException(400, "The number of responses does not match the number of requests.");
            }

            Object[] result = new Object[count];
            for (int i = 0; i < count; i++) {
                result[i] = apiClient.parseBatchPart(masterRequest, response.getData().getBodyPart(i), requests[i].getResponseType());
            }

            return result;
        }
        catch (javax.mail.MessagingException e) {
            throw new ApiException(e);
        }
    }
}
